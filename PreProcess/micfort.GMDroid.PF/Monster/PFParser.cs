//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /home/michiel/TabletopWitch/src/PreProcess/micfort.GMDroid.PF/Monster/PF.g4 by ANTLR 4.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.3")]
[System.CLSCompliant(false)]
public partial class PFParser : Parser {
	public const int
		T__39=1, T__38=2, T__37=3, T__36=4, T__35=5, T__34=6, T__33=7, T__32=8, 
		T__31=9, T__30=10, T__29=11, T__28=12, T__27=13, T__26=14, T__25=15, T__24=16, 
		T__23=17, T__22=18, T__21=19, T__20=20, T__19=21, T__18=22, T__17=23, 
		T__16=24, T__15=25, T__14=26, T__13=27, T__12=28, T__11=29, T__10=30, 
		T__9=31, T__8=32, T__7=33, T__6=34, T__5=35, T__4=36, T__3=37, T__2=38, 
		T__1=39, T__0=40, STRING=41, NUMBER=42, SPECIALSYMBOLS=43, NEWLINE=44, 
		SEP=45, QUOTE=46, DOUBLEQUOTE=47, WS=48;
	public static readonly string[] tokenNames = {
		"<INVALID>", "'Medium'", "'AC '", "'LE'", "'each'", "'-'", "'('", "'LN'", 
		"'d'", "'LG'", "' each'", "'N'", "' HD'", "' '", "'Gargantuan'", "'CN'", 
		"' ft'", "'NG'", "'HD'", "', Ref '", "', '", "'M'", "'CE'", "' touch '", 
		"'NULL'", "')'", "'.'", "'+'", "'Diminutive'", "';'", "'CG'", "'Fort '", 
		"'Colossal'", "' flat-footed '", "', Will '", "'Large'", "'/'", "'NE'", 
		"'Huge'", "'Small'", "'Tiny'", "STRING", "NUMBER", "SPECIALSYMBOLS", "NEWLINE", 
		"','", "'\"'", "'\"\"'", "WS"
	};
	public const int
		RULE_pf = 0, RULE_header = 1, RULE_line = 2, RULE_cell = 3, RULE_text = 4, 
		RULE_quotedText = 5, RULE_posNegNumber = 6, RULE_monster = 7, RULE_nameCell = 8, 
		RULE_crCell = 9, RULE_cr = 10, RULE_xpCell = 11, RULE_raceCell = 12, RULE_mclassCell = 13, 
		RULE_mclass = 14, RULE_mclassName = 15, RULE_monstersourceCell = 16, RULE_alignmentCell = 17, 
		RULE_sizeCell = 18, RULE_typeCell = 19, RULE_subtypeCell = 20, RULE_initCell = 21, 
		RULE_init = 22, RULE_sensesCell = 23, RULE_senses = 24, RULE_sense = 25, 
		RULE_auraCell = 26, RULE_acCell = 27, RULE_armorClass = 28, RULE_armorClassTouch = 29, 
		RULE_armorClassFlatFooted = 30, RULE_ac_modsCell = 31, RULE_ac_mods = 32, 
		RULE_ac_mod = 33, RULE_ac_modSpecial = 34, RULE_hpCell = 35, RULE_hdCell = 36, 
		RULE_hd = 37, RULE_hp_modsCell = 38, RULE_savesCell = 39, RULE_saves = 40, 
		RULE_savesFort = 41, RULE_savesRef = 42, RULE_savesWill = 43, RULE_fortCell = 44, 
		RULE_refCell = 45, RULE_willCell = 46, RULE_save_modsCell = 47, RULE_defensiveabilitiesCell = 48, 
		RULE_drCell = 49, RULE_drList = 50, RULE_dr = 51, RULE_immuneCell = 52, 
		RULE_immuneList = 53, RULE_immune = 54, RULE_resistCell = 55, RULE_restistList = 56, 
		RULE_resist = 57, RULE_srCell = 58, RULE_weaknessesCell = 59, RULE_speedCell = 60, 
		RULE_speed_modCell = 61, RULE_meleeCell = 62, RULE_rangedCell = 63, RULE_spaceCell = 64, 
		RULE_reachCell = 65, RULE_specialattacksCell = 66, RULE_spelllikeabilitiesCell = 67, 
		RULE_spellsknownCell = 68, RULE_spellspreparedCell = 69, RULE_spelldomainsCell = 70, 
		RULE_abilityscoresCell = 71, RULE_abilityscore_modsCell = 72, RULE_baseatkCell = 73, 
		RULE_cmbCell = 74, RULE_cmdCell = 75, RULE_featsCell = 76, RULE_skillsCell = 77, 
		RULE_skills = 78, RULE_racialmodsCell = 79, RULE_languagesCell = 80, RULE_sqCell = 81, 
		RULE_environmentCell = 82, RULE_organizationCell = 83, RULE_treasureCell = 84, 
		RULE_description_visualCell = 85, RULE_groupCell = 86, RULE_sourceCell = 87, 
		RULE_istemplateCell = 88, RULE_specialabilitiesCell = 89, RULE_descriptionCell = 90, 
		RULE_fulltextCell = 91, RULE_genderCell = 92, RULE_bloodlineCell = 93, 
		RULE_prohibitedschoolsCell = 94, RULE_beforecombatCell = 95, RULE_duringcombatCell = 96, 
		RULE_moraleCell = 97, RULE_gearCell = 98, RULE_othergearCell = 99, RULE_vulnerabilityCell = 100, 
		RULE_noteCell = 101, RULE_characterflagCell = 102, RULE_companionflagCell = 103, 
		RULE_flyCell = 104, RULE_climbCell = 105, RULE_burrowCell = 106, RULE_swimCell = 107, 
		RULE_landCell = 108, RULE_templatesappliedCell = 109, RULE_offensenoteCell = 110, 
		RULE_basestatisticsCell = 111, RULE_extractspreparedCell = 112, RULE_agecategoryCell = 113, 
		RULE_mysteryCell = 114, RULE_classarchetypesCell = 115, RULE_patronCell = 116, 
		RULE_companionfamiliarlinkCell = 117, RULE_focusedschoolCell = 118, RULE_traitsCell = 119, 
		RULE_alternatenameformCell = 120, RULE_linktextCell = 121, RULE_idCell = 122, 
		RULE_uniquemonsterCell = 123, RULE_thassilonianspecializationCell = 124, 
		RULE_variantCell = 125, RULE_mrCell = 126, RULE_mythicCell = 127, RULE_mtCell = 128, 
		RULE_skill = 129, RULE_skillName = 130, RULE_skillSpecial = 131, RULE_distance = 132, 
		RULE_name = 133, RULE_dices = 134, RULE_dice = 135, RULE_diceSides = 136, 
		RULE_diceCount = 137, RULE_modifier = 138;
	public static readonly string[] ruleNames = {
		"pf", "header", "line", "cell", "text", "quotedText", "posNegNumber", 
		"monster", "nameCell", "crCell", "cr", "xpCell", "raceCell", "mclassCell", 
		"mclass", "mclassName", "monstersourceCell", "alignmentCell", "sizeCell", 
		"typeCell", "subtypeCell", "initCell", "init", "sensesCell", "senses", 
		"sense", "auraCell", "acCell", "armorClass", "armorClassTouch", "armorClassFlatFooted", 
		"ac_modsCell", "ac_mods", "ac_mod", "ac_modSpecial", "hpCell", "hdCell", 
		"hd", "hp_modsCell", "savesCell", "saves", "savesFort", "savesRef", "savesWill", 
		"fortCell", "refCell", "willCell", "save_modsCell", "defensiveabilitiesCell", 
		"drCell", "drList", "dr", "immuneCell", "immuneList", "immune", "resistCell", 
		"restistList", "resist", "srCell", "weaknessesCell", "speedCell", "speed_modCell", 
		"meleeCell", "rangedCell", "spaceCell", "reachCell", "specialattacksCell", 
		"spelllikeabilitiesCell", "spellsknownCell", "spellspreparedCell", "spelldomainsCell", 
		"abilityscoresCell", "abilityscore_modsCell", "baseatkCell", "cmbCell", 
		"cmdCell", "featsCell", "skillsCell", "skills", "racialmodsCell", "languagesCell", 
		"sqCell", "environmentCell", "organizationCell", "treasureCell", "description_visualCell", 
		"groupCell", "sourceCell", "istemplateCell", "specialabilitiesCell", "descriptionCell", 
		"fulltextCell", "genderCell", "bloodlineCell", "prohibitedschoolsCell", 
		"beforecombatCell", "duringcombatCell", "moraleCell", "gearCell", "othergearCell", 
		"vulnerabilityCell", "noteCell", "characterflagCell", "companionflagCell", 
		"flyCell", "climbCell", "burrowCell", "swimCell", "landCell", "templatesappliedCell", 
		"offensenoteCell", "basestatisticsCell", "extractspreparedCell", "agecategoryCell", 
		"mysteryCell", "classarchetypesCell", "patronCell", "companionfamiliarlinkCell", 
		"focusedschoolCell", "traitsCell", "alternatenameformCell", "linktextCell", 
		"idCell", "uniquemonsterCell", "thassilonianspecializationCell", "variantCell", 
		"mrCell", "mythicCell", "mtCell", "skill", "skillName", "skillSpecial", 
		"distance", "name", "dices", "dice", "diceSides", "diceCount", "modifier"
	};

	public override string GrammarFileName { get { return "PF.g4"; } }

	public override string[] TokenNames { get { return tokenNames; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public PFParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class PfContext : ParserRuleContext {
		public MonsterContext monster(int i) {
			return GetRuleContext<MonsterContext>(i);
		}
		public IReadOnlyList<MonsterContext> monster() {
			return GetRuleContexts<MonsterContext>();
		}
		public HeaderContext header() {
			return GetRuleContext<HeaderContext>(0);
		}
		public PfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pf; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.EnterPf(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.ExitPf(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPFVisitor<TResult> typedVisitor = visitor as IPFVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPf(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PfContext pf() {
		PfContext _localctx = new PfContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_pf);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 278; header();
			State = 280;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 279; monster();
				}
				}
				State = 282;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__39) | (1L << T__38) | (1L << T__37) | (1L << T__36) | (1L << T__35) | (1L << T__34) | (1L << T__33) | (1L << T__32) | (1L << T__31) | (1L << T__30) | (1L << T__29) | (1L << T__28) | (1L << T__27) | (1L << T__26) | (1L << T__25) | (1L << T__24) | (1L << T__23) | (1L << T__22) | (1L << T__21) | (1L << T__20) | (1L << T__19) | (1L << T__18) | (1L << T__17) | (1L << T__16) | (1L << T__15) | (1L << T__14) | (1L << T__13) | (1L << T__12) | (1L << T__11) | (1L << T__10) | (1L << T__9) | (1L << T__8) | (1L << T__7) | (1L << T__6) | (1L << T__5) | (1L << T__4) | (1L << T__3) | (1L << T__2) | (1L << T__1) | (1L << T__0) | (1L << STRING) | (1L << NUMBER) | (1L << SPECIALSYMBOLS) | (1L << NEWLINE) | (1L << SEP) | (1L << QUOTE) | (1L << DOUBLEQUOTE) | (1L << WS))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HeaderContext : ParserRuleContext {
		public LineContext line() {
			return GetRuleContext<LineContext>(0);
		}
		public HeaderContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_header; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.EnterHeader(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.ExitHeader(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPFVisitor<TResult> typedVisitor = visitor as IPFVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHeader(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HeaderContext header() {
		HeaderContext _localctx = new HeaderContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_header);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 284; line();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineContext : ParserRuleContext {
		public ITerminalNode NEWLINE() { return GetToken(PFParser.NEWLINE, 0); }
		public CellContext cell(int i) {
			return GetRuleContext<CellContext>(i);
		}
		public ITerminalNode SEP(int i) {
			return GetToken(PFParser.SEP, i);
		}
		public IReadOnlyList<ITerminalNode> SEP() { return GetTokens(PFParser.SEP); }
		public IReadOnlyList<CellContext> cell() {
			return GetRuleContexts<CellContext>();
		}
		public LineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_line; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.EnterLine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.ExitLine(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPFVisitor<TResult> typedVisitor = visitor as IPFVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineContext line() {
		LineContext _localctx = new LineContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_line);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 286; cell();
			State = 291;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==SEP) {
				{
				{
				State = 287; Match(SEP);
				State = 288; cell();
				}
				}
				State = 293;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 294; Match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CellContext : ParserRuleContext {
		public TextContext text() {
			return GetRuleContext<TextContext>(0);
		}
		public ITerminalNode QUOTE(int i) {
			return GetToken(PFParser.QUOTE, i);
		}
		public IReadOnlyList<ITerminalNode> QUOTE() { return GetTokens(PFParser.QUOTE); }
		public QuotedTextContext quotedText() {
			return GetRuleContext<QuotedTextContext>(0);
		}
		public CellContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cell; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.EnterCell(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.ExitCell(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPFVisitor<TResult> typedVisitor = visitor as IPFVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCell(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CellContext cell() {
		CellContext _localctx = new CellContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_cell);
		try {
			State = 302;
			switch ( Interpreter.AdaptivePredict(_input,2,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 296; Match(QUOTE);
				State = 297; quotedText();
				State = 298; Match(QUOTE);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 300; text();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TextContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(PFParser.NEWLINE); }
		public ITerminalNode QUOTE(int i) {
			return GetToken(PFParser.QUOTE, i);
		}
		public ITerminalNode NEWLINE(int i) {
			return GetToken(PFParser.NEWLINE, i);
		}
		public IReadOnlyList<ITerminalNode> QUOTE() { return GetTokens(PFParser.QUOTE); }
		public ITerminalNode SEP(int i) {
			return GetToken(PFParser.SEP, i);
		}
		public IReadOnlyList<ITerminalNode> SEP() { return GetTokens(PFParser.SEP); }
		public TextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_text; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.EnterText(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.ExitText(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPFVisitor<TResult> typedVisitor = visitor as IPFVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitText(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TextContext text() {
		TextContext _localctx = new TextContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_text);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 307;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,3,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 304;
					_la = _input.La(1);
					if ( _la <= 0 || ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NEWLINE) | (1L << SEP) | (1L << QUOTE))) != 0)) ) {
					_errHandler.RecoverInline(this);
					}
					Consume();
					}
					} 
				}
				State = 309;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,3,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QuotedTextContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(PFParser.NEWLINE); }
		public ITerminalNode QUOTE(int i) {
			return GetToken(PFParser.QUOTE, i);
		}
		public ITerminalNode NEWLINE(int i) {
			return GetToken(PFParser.NEWLINE, i);
		}
		public IReadOnlyList<ITerminalNode> QUOTE() { return GetTokens(PFParser.QUOTE); }
		public QuotedTextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_quotedText; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.EnterQuotedText(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.ExitQuotedText(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPFVisitor<TResult> typedVisitor = visitor as IPFVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuotedText(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QuotedTextContext quotedText() {
		QuotedTextContext _localctx = new QuotedTextContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_quotedText);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 313;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__39) | (1L << T__38) | (1L << T__37) | (1L << T__36) | (1L << T__35) | (1L << T__34) | (1L << T__33) | (1L << T__32) | (1L << T__31) | (1L << T__30) | (1L << T__29) | (1L << T__28) | (1L << T__27) | (1L << T__26) | (1L << T__25) | (1L << T__24) | (1L << T__23) | (1L << T__22) | (1L << T__21) | (1L << T__20) | (1L << T__19) | (1L << T__18) | (1L << T__17) | (1L << T__16) | (1L << T__15) | (1L << T__14) | (1L << T__13) | (1L << T__12) | (1L << T__11) | (1L << T__10) | (1L << T__9) | (1L << T__8) | (1L << T__7) | (1L << T__6) | (1L << T__5) | (1L << T__4) | (1L << T__3) | (1L << T__2) | (1L << T__1) | (1L << T__0) | (1L << STRING) | (1L << NUMBER) | (1L << SPECIALSYMBOLS) | (1L << SEP) | (1L << DOUBLEQUOTE) | (1L << WS))) != 0)) {
				{
				{
				State = 310;
				_la = _input.La(1);
				if ( _la <= 0 || (_la==NEWLINE || _la==QUOTE) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				}
				}
				State = 315;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PosNegNumberContext : ParserRuleContext {
		public ITerminalNode NUMBER() { return GetToken(PFParser.NUMBER, 0); }
		public PosNegNumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_posNegNumber; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.EnterPosNegNumber(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.ExitPosNegNumber(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPFVisitor<TResult> typedVisitor = visitor as IPFVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPosNegNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PosNegNumberContext posNegNumber() {
		PosNegNumberContext _localctx = new PosNegNumberContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_posNegNumber);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 317;
			_la = _input.La(1);
			if (_la==T__35 || _la==T__13) {
				{
				State = 316;
				_la = _input.La(1);
				if ( !(_la==T__35 || _la==T__13) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				}
			}

			State = 319; Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MonsterContext : ParserRuleContext {
		public Speed_modCellContext speed_modCell() {
			return GetRuleContext<Speed_modCellContext>(0);
		}
		public GroupCellContext groupCell() {
			return GetRuleContext<GroupCellContext>(0);
		}
		public SqCellContext sqCell() {
			return GetRuleContext<SqCellContext>(0);
		}
		public RefCellContext refCell() {
			return GetRuleContext<RefCellContext>(0);
		}
		public IstemplateCellContext istemplateCell() {
			return GetRuleContext<IstemplateCellContext>(0);
		}
		public FlyCellContext flyCell() {
			return GetRuleContext<FlyCellContext>(0);
		}
		public TemplatesappliedCellContext templatesappliedCell() {
			return GetRuleContext<TemplatesappliedCellContext>(0);
		}
		public BeforecombatCellContext beforecombatCell() {
			return GetRuleContext<BeforecombatCellContext>(0);
		}
		public RaceCellContext raceCell() {
			return GetRuleContext<RaceCellContext>(0);
		}
		public CmbCellContext cmbCell() {
			return GetRuleContext<CmbCellContext>(0);
		}
		public AbilityscoresCellContext abilityscoresCell() {
			return GetRuleContext<AbilityscoresCellContext>(0);
		}
		public HpCellContext hpCell() {
			return GetRuleContext<HpCellContext>(0);
		}
		public SkillsCellContext skillsCell() {
			return GetRuleContext<SkillsCellContext>(0);
		}
		public XpCellContext xpCell() {
			return GetRuleContext<XpCellContext>(0);
		}
		public SpeedCellContext speedCell() {
			return GetRuleContext<SpeedCellContext>(0);
		}
		public Hp_modsCellContext hp_modsCell() {
			return GetRuleContext<Hp_modsCellContext>(0);
		}
		public MythicCellContext mythicCell() {
			return GetRuleContext<MythicCellContext>(0);
		}
		public PatronCellContext patronCell() {
			return GetRuleContext<PatronCellContext>(0);
		}
		public ClimbCellContext climbCell() {
			return GetRuleContext<ClimbCellContext>(0);
		}
		public TypeCellContext typeCell() {
			return GetRuleContext<TypeCellContext>(0);
		}
		public HdCellContext hdCell() {
			return GetRuleContext<HdCellContext>(0);
		}
		public BaseatkCellContext baseatkCell() {
			return GetRuleContext<BaseatkCellContext>(0);
		}
		public ThassilonianspecializationCellContext thassilonianspecializationCell() {
			return GetRuleContext<ThassilonianspecializationCellContext>(0);
		}
		public OffensenoteCellContext offensenoteCell() {
			return GetRuleContext<OffensenoteCellContext>(0);
		}
		public ExtractspreparedCellContext extractspreparedCell() {
			return GetRuleContext<ExtractspreparedCellContext>(0);
		}
		public Abilityscore_modsCellContext abilityscore_modsCell() {
			return GetRuleContext<Abilityscore_modsCellContext>(0);
		}
		public WillCellContext willCell() {
			return GetRuleContext<WillCellContext>(0);
		}
		public SrCellContext srCell() {
			return GetRuleContext<SrCellContext>(0);
		}
		public SensesCellContext sensesCell() {
			return GetRuleContext<SensesCellContext>(0);
		}
		public MonstersourceCellContext monstersourceCell() {
			return GetRuleContext<MonstersourceCellContext>(0);
		}
		public DuringcombatCellContext duringcombatCell() {
			return GetRuleContext<DuringcombatCellContext>(0);
		}
		public MeleeCellContext meleeCell() {
			return GetRuleContext<MeleeCellContext>(0);
		}
		public Ac_modsCellContext ac_modsCell() {
			return GetRuleContext<Ac_modsCellContext>(0);
		}
		public MysteryCellContext mysteryCell() {
			return GetRuleContext<MysteryCellContext>(0);
		}
		public MrCellContext mrCell() {
			return GetRuleContext<MrCellContext>(0);
		}
		public BloodlineCellContext bloodlineCell() {
			return GetRuleContext<BloodlineCellContext>(0);
		}
		public InitCellContext initCell() {
			return GetRuleContext<InitCellContext>(0);
		}
		public GenderCellContext genderCell() {
			return GetRuleContext<GenderCellContext>(0);
		}
		public SpaceCellContext spaceCell() {
			return GetRuleContext<SpaceCellContext>(0);
		}
		public SizeCellContext sizeCell() {
			return GetRuleContext<SizeCellContext>(0);
		}
		public LanguagesCellContext languagesCell() {
			return GetRuleContext<LanguagesCellContext>(0);
		}
		public UniquemonsterCellContext uniquemonsterCell() {
			return GetRuleContext<UniquemonsterCellContext>(0);
		}
		public ResistCellContext resistCell() {
			return GetRuleContext<ResistCellContext>(0);
		}
		public CmdCellContext cmdCell() {
			return GetRuleContext<CmdCellContext>(0);
		}
		public SpelldomainsCellContext spelldomainsCell() {
			return GetRuleContext<SpelldomainsCellContext>(0);
		}
		public SpelllikeabilitiesCellContext spelllikeabilitiesCell() {
			return GetRuleContext<SpelllikeabilitiesCellContext>(0);
		}
		public DefensiveabilitiesCellContext defensiveabilitiesCell() {
			return GetRuleContext<DefensiveabilitiesCellContext>(0);
		}
		public CompanionflagCellContext companionflagCell() {
			return GetRuleContext<CompanionflagCellContext>(0);
		}
		public RangedCellContext rangedCell() {
			return GetRuleContext<RangedCellContext>(0);
		}
		public ProhibitedschoolsCellContext prohibitedschoolsCell() {
			return GetRuleContext<ProhibitedschoolsCellContext>(0);
		}
		public SpellspreparedCellContext spellspreparedCell() {
			return GetRuleContext<SpellspreparedCellContext>(0);
		}
		public GearCellContext gearCell() {
			return GetRuleContext<GearCellContext>(0);
		}
		public AlignmentCellContext alignmentCell() {
			return GetRuleContext<AlignmentCellContext>(0);
		}
		public SwimCellContext swimCell() {
			return GetRuleContext<SwimCellContext>(0);
		}
		public VulnerabilityCellContext vulnerabilityCell() {
			return GetRuleContext<VulnerabilityCellContext>(0);
		}
		public AgecategoryCellContext agecategoryCell() {
			return GetRuleContext<AgecategoryCellContext>(0);
		}
		public AlternatenameformCellContext alternatenameformCell() {
			return GetRuleContext<AlternatenameformCellContext>(0);
		}
		public NoteCellContext noteCell() {
			return GetRuleContext<NoteCellContext>(0);
		}
		public IdCellContext idCell() {
			return GetRuleContext<IdCellContext>(0);
		}
		public ClassarchetypesCellContext classarchetypesCell() {
			return GetRuleContext<ClassarchetypesCellContext>(0);
		}
		public FulltextCellContext fulltextCell() {
			return GetRuleContext<FulltextCellContext>(0);
		}
		public TraitsCellContext traitsCell() {
			return GetRuleContext<TraitsCellContext>(0);
		}
		public SourceCellContext sourceCell() {
			return GetRuleContext<SourceCellContext>(0);
		}
		public BasestatisticsCellContext basestatisticsCell() {
			return GetRuleContext<BasestatisticsCellContext>(0);
		}
		public CompanionfamiliarlinkCellContext companionfamiliarlinkCell() {
			return GetRuleContext<CompanionfamiliarlinkCellContext>(0);
		}
		public MclassCellContext mclassCell() {
			return GetRuleContext<MclassCellContext>(0);
		}
		public OthergearCellContext othergearCell() {
			return GetRuleContext<OthergearCellContext>(0);
		}
		public RacialmodsCellContext racialmodsCell() {
			return GetRuleContext<RacialmodsCellContext>(0);
		}
		public FocusedschoolCellContext focusedschoolCell() {
			return GetRuleContext<FocusedschoolCellContext>(0);
		}
		public LandCellContext landCell() {
			return GetRuleContext<LandCellContext>(0);
		}
		public SpellsknownCellContext spellsknownCell() {
			return GetRuleContext<SpellsknownCellContext>(0);
		}
		public AcCellContext acCell() {
			return GetRuleContext<AcCellContext>(0);
		}
		public SubtypeCellContext subtypeCell() {
			return GetRuleContext<SubtypeCellContext>(0);
		}
		public MtCellContext mtCell() {
			return GetRuleContext<MtCellContext>(0);
		}
		public BurrowCellContext burrowCell() {
			return GetRuleContext<BurrowCellContext>(0);
		}
		public FeatsCellContext featsCell() {
			return GetRuleContext<FeatsCellContext>(0);
		}
		public TreasureCellContext treasureCell() {
			return GetRuleContext<TreasureCellContext>(0);
		}
		public SpecialattacksCellContext specialattacksCell() {
			return GetRuleContext<SpecialattacksCellContext>(0);
		}
		public SpecialabilitiesCellContext specialabilitiesCell() {
			return GetRuleContext<SpecialabilitiesCellContext>(0);
		}
		public Save_modsCellContext save_modsCell() {
			return GetRuleContext<Save_modsCellContext>(0);
		}
		public ReachCellContext reachCell() {
			return GetRuleContext<ReachCellContext>(0);
		}
		public NameCellContext nameCell() {
			return GetRuleContext<NameCellContext>(0);
		}
		public Description_visualCellContext description_visualCell() {
			return GetRuleContext<Description_visualCellContext>(0);
		}
		public DrCellContext drCell() {
			return GetRuleContext<DrCellContext>(0);
		}
		public VariantCellContext variantCell() {
			return GetRuleContext<VariantCellContext>(0);
		}
		public MoraleCellContext moraleCell() {
			return GetRuleContext<MoraleCellContext>(0);
		}
		public CharacterflagCellContext characterflagCell() {
			return GetRuleContext<CharacterflagCellContext>(0);
		}
		public ImmuneCellContext immuneCell() {
			return GetRuleContext<ImmuneCellContext>(0);
		}
		public SavesCellContext savesCell() {
			return GetRuleContext<SavesCellContext>(0);
		}
		public EnvironmentCellContext environmentCell() {
			return GetRuleContext<EnvironmentCellContext>(0);
		}
		public ITerminalNode NEWLINE() { return GetToken(PFParser.NEWLINE, 0); }
		public FortCellContext fortCell() {
			return GetRuleContext<FortCellContext>(0);
		}
		public OrganizationCellContext organizationCell() {
			return GetRuleContext<OrganizationCellContext>(0);
		}
		public AuraCellContext auraCell() {
			return GetRuleContext<AuraCellContext>(0);
		}
		public LinktextCellContext linktextCell() {
			return GetRuleContext<LinktextCellContext>(0);
		}
		public WeaknessesCellContext weaknessesCell() {
			return GetRuleContext<WeaknessesCellContext>(0);
		}
		public CrCellContext crCell() {
			return GetRuleContext<CrCellContext>(0);
		}
		public DescriptionCellContext descriptionCell() {
			return GetRuleContext<DescriptionCellContext>(0);
		}
		public MonsterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_monster; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.EnterMonster(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.ExitMonster(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPFVisitor<TResult> typedVisitor = visitor as IPFVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMonster(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MonsterContext monster() {
		MonsterContext _localctx = new MonsterContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_monster);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 321; nameCell();
			State = 322; Match(SEP);
			State = 323; crCell();
			State = 324; Match(SEP);
			State = 325; xpCell();
			State = 326; Match(SEP);
			State = 327; raceCell();
			State = 328; Match(SEP);
			State = 329; mclassCell();
			State = 330; Match(SEP);
			State = 331; monstersourceCell();
			State = 332; Match(SEP);
			State = 333; alignmentCell();
			State = 334; Match(SEP);
			State = 335; sizeCell();
			State = 336; Match(SEP);
			State = 337; typeCell();
			State = 338; Match(SEP);
			State = 339; subtypeCell();
			State = 340; Match(SEP);
			State = 341; initCell();
			State = 342; Match(SEP);
			State = 343; sensesCell();
			State = 344; Match(SEP);
			State = 345; auraCell();
			State = 346; Match(SEP);
			State = 347; acCell();
			State = 348; Match(SEP);
			State = 349; ac_modsCell();
			State = 350; Match(SEP);
			State = 351; hpCell();
			State = 352; Match(SEP);
			State = 353; hdCell();
			State = 354; Match(SEP);
			State = 355; hp_modsCell();
			State = 356; Match(SEP);
			State = 357; savesCell();
			State = 358; Match(SEP);
			State = 359; fortCell();
			State = 360; Match(SEP);
			State = 361; refCell();
			State = 362; Match(SEP);
			State = 363; willCell();
			State = 364; Match(SEP);
			State = 365; save_modsCell();
			State = 366; Match(SEP);
			State = 367; defensiveabilitiesCell();
			State = 368; Match(SEP);
			State = 369; drCell();
			State = 370; Match(SEP);
			State = 371; immuneCell();
			State = 372; Match(SEP);
			State = 373; resistCell();
			State = 374; Match(SEP);
			State = 375; srCell();
			State = 376; Match(SEP);
			State = 377; weaknessesCell();
			State = 378; Match(SEP);
			State = 379; speedCell();
			State = 380; Match(SEP);
			State = 381; speed_modCell();
			State = 382; Match(SEP);
			State = 383; meleeCell();
			State = 384; Match(SEP);
			State = 385; rangedCell();
			State = 386; Match(SEP);
			State = 387; spaceCell();
			State = 388; Match(SEP);
			State = 389; reachCell();
			State = 390; Match(SEP);
			State = 391; specialattacksCell();
			State = 392; Match(SEP);
			State = 393; spelllikeabilitiesCell();
			State = 394; Match(SEP);
			State = 395; spellsknownCell();
			State = 396; Match(SEP);
			State = 397; spellspreparedCell();
			State = 398; Match(SEP);
			State = 399; spelldomainsCell();
			State = 400; Match(SEP);
			State = 401; abilityscoresCell();
			State = 402; Match(SEP);
			State = 403; abilityscore_modsCell();
			State = 404; Match(SEP);
			State = 405; baseatkCell();
			State = 406; Match(SEP);
			State = 407; cmbCell();
			State = 408; Match(SEP);
			State = 409; cmdCell();
			State = 410; Match(SEP);
			State = 411; featsCell();
			State = 412; Match(SEP);
			State = 413; skillsCell();
			State = 414; Match(SEP);
			State = 415; racialmodsCell();
			State = 416; Match(SEP);
			State = 417; languagesCell();
			State = 418; Match(SEP);
			State = 419; sqCell();
			State = 420; Match(SEP);
			State = 421; environmentCell();
			State = 422; Match(SEP);
			State = 423; organizationCell();
			State = 424; Match(SEP);
			State = 425; treasureCell();
			State = 426; Match(SEP);
			State = 427; description_visualCell();
			State = 428; Match(SEP);
			State = 429; groupCell();
			State = 430; Match(SEP);
			State = 431; sourceCell();
			State = 432; Match(SEP);
			State = 433; istemplateCell();
			State = 434; Match(SEP);
			State = 435; specialabilitiesCell();
			State = 436; Match(SEP);
			State = 437; descriptionCell();
			State = 438; Match(SEP);
			State = 439; fulltextCell();
			State = 440; Match(SEP);
			State = 441; genderCell();
			State = 442; Match(SEP);
			State = 443; bloodlineCell();
			State = 444; Match(SEP);
			State = 445; prohibitedschoolsCell();
			State = 446; Match(SEP);
			State = 447; beforecombatCell();
			State = 448; Match(SEP);
			State = 449; duringcombatCell();
			State = 450; Match(SEP);
			State = 451; moraleCell();
			State = 452; Match(SEP);
			State = 453; gearCell();
			State = 454; Match(SEP);
			State = 455; othergearCell();
			State = 456; Match(SEP);
			State = 457; vulnerabilityCell();
			State = 458; Match(SEP);
			State = 459; noteCell();
			State = 460; Match(SEP);
			State = 461; characterflagCell();
			State = 462; Match(SEP);
			State = 463; companionflagCell();
			State = 464; Match(SEP);
			State = 465; flyCell();
			State = 466; Match(SEP);
			State = 467; climbCell();
			State = 468; Match(SEP);
			State = 469; burrowCell();
			State = 470; Match(SEP);
			State = 471; swimCell();
			State = 472; Match(SEP);
			State = 473; landCell();
			State = 474; Match(SEP);
			State = 475; templatesappliedCell();
			State = 476; Match(SEP);
			State = 477; offensenoteCell();
			State = 478; Match(SEP);
			State = 479; basestatisticsCell();
			State = 480; Match(SEP);
			State = 481; extractspreparedCell();
			State = 482; Match(SEP);
			State = 483; agecategoryCell();
			State = 484; Match(SEP);
			State = 485; mysteryCell();
			State = 486; Match(SEP);
			State = 487; classarchetypesCell();
			State = 488; Match(SEP);
			State = 489; patronCell();
			State = 490; Match(SEP);
			State = 491; companionfamiliarlinkCell();
			State = 492; Match(SEP);
			State = 493; focusedschoolCell();
			State = 494; Match(SEP);
			State = 495; traitsCell();
			State = 496; Match(SEP);
			State = 497; alternatenameformCell();
			State = 498; Match(SEP);
			State = 499; linktextCell();
			State = 500; Match(SEP);
			State = 501; idCell();
			State = 502; Match(SEP);
			State = 503; uniquemonsterCell();
			State = 504; Match(SEP);
			State = 505; thassilonianspecializationCell();
			State = 506; Match(SEP);
			State = 507; variantCell();
			State = 508; Match(SEP);
			State = 509; mrCell();
			State = 510; Match(SEP);
			State = 511; mythicCell();
			State = 512; Match(SEP);
			State = 513; mtCell();
			State = 514; Match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameCellContext : ParserRuleContext {
		public CellContext cell() {
			return GetRuleContext<CellContext>(0);
		}
		public NameCellContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nameCell; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.EnterNameCell(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.ExitNameCell(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPFVisitor<TResult> typedVisitor = visitor as IPFVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNameCell(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameCellContext nameCell() {
		NameCellContext _localctx = new NameCellContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_nameCell);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 516; cell();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CrCellContext : ParserRuleContext {
		public CrContext cr() {
			return GetRuleContext<CrContext>(0);
		}
		public CrCellContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_crCell; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.EnterCrCell(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.ExitCrCell(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPFVisitor<TResult> typedVisitor = visitor as IPFVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCrCell(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CrCellContext crCell() {
		CrCellContext _localctx = new CrCellContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_crCell);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 518; cr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CrContext : ParserRuleContext {
		public ITerminalNode NUMBER(int i) {
			return GetToken(PFParser.NUMBER, i);
		}
		public IReadOnlyList<ITerminalNode> NUMBER() { return GetTokens(PFParser.NUMBER); }
		public CrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.EnterCr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.ExitCr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPFVisitor<TResult> typedVisitor = visitor as IPFVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CrContext cr() {
		CrContext _localctx = new CrContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_cr);
		try {
			State = 524;
			switch ( Interpreter.AdaptivePredict(_input,6,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 520; Match(NUMBER);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 521; Match(NUMBER);
				State = 522; Match(T__4);
				State = 523; Match(NUMBER);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XpCellContext : ParserRuleContext {
		public ITerminalNode NUMBER() { return GetToken(PFParser.NUMBER, 0); }
		public XpCellContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xpCell; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.EnterXpCell(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.ExitXpCell(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPFVisitor<TResult> typedVisitor = visitor as IPFVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXpCell(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public XpCellContext xpCell() {
		XpCellContext _localctx = new XpCellContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_xpCell);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 526; Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RaceCellContext : ParserRuleContext {
		public CellContext cell() {
			return GetRuleContext<CellContext>(0);
		}
		public RaceCellContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_raceCell; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.EnterRaceCell(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.ExitRaceCell(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPFVisitor<TResult> typedVisitor = visitor as IPFVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRaceCell(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RaceCellContext raceCell() {
		RaceCellContext _localctx = new RaceCellContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_raceCell);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 528; cell();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MclassCellContext : ParserRuleContext {
		public IReadOnlyList<MclassContext> mclass() {
			return GetRuleContexts<MclassContext>();
		}
		public MclassContext mclass(int i) {
			return GetRuleContext<MclassContext>(i);
		}
		public MclassCellContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mclassCell; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.EnterMclassCell(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.ExitMclassCell(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPFVisitor<TResult> typedVisitor = visitor as IPFVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMclassCell(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MclassCellContext mclassCell() {
		MclassCellContext _localctx = new MclassCellContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_mclassCell);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 538;
			_la = _input.La(1);
			if (_la==T__16 || _la==STRING) {
				{
				State = 530; mclass();
				State = 535;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==T__4) {
					{
					{
					State = 531; Match(T__4);
					State = 532; mclass();
					}
					}
					State = 537;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MclassContext : ParserRuleContext {
		public MclassNameContext mclassName() {
			return GetRuleContext<MclassNameContext>(0);
		}
		public ITerminalNode NUMBER() { return GetToken(PFParser.NUMBER, 0); }
		public MclassContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mclass; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.EnterMclass(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.ExitMclass(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPFVisitor<TResult> typedVisitor = visitor as IPFVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMclass(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MclassContext mclass() {
		MclassContext _localctx = new MclassContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_mclass);
		int _la;
		try {
			State = 550;
			switch (_input.La(1)) {
			case STRING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 540; mclassName();
				State = 544;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==T__27) {
					{
					{
					State = 541; Match(T__27);
					}
					}
					State = 546;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 547; Match(NUMBER);
				}
				break;
			case T__16:
				EnterOuterAlt(_localctx, 2);
				{
				State = 549; Match(T__16);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MclassNameContext : ParserRuleContext {
		public ITerminalNode STRING(int i) {
			return GetToken(PFParser.STRING, i);
		}
		public IReadOnlyList<ITerminalNode> STRING() { return GetTokens(PFParser.STRING); }
		public MclassNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mclassName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.EnterMclassName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.ExitMclassName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPFVisitor<TResult> typedVisitor = visitor as IPFVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMclassName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MclassNameContext mclassName() {
		MclassNameContext _localctx = new MclassNameContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_mclassName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 552; Match(STRING);
			State = 556;
			_la = _input.La(1);
			if (_la==T__34) {
				{
				State = 553; Match(T__34);
				State = 554; Match(STRING);
				State = 555; Match(T__15);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MonstersourceCellContext : ParserRuleContext {
		public CellContext cell() {
			return GetRuleContext<CellContext>(0);
		}
		public MonstersourceCellContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_monstersourceCell; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.EnterMonstersourceCell(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.ExitMonstersourceCell(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPFVisitor<TResult> typedVisitor = visitor as IPFVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMonstersourceCell(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MonstersourceCellContext monstersourceCell() {
		MonstersourceCellContext _localctx = new MonstersourceCellContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_monstersourceCell);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 558; cell();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlignmentCellContext : ParserRuleContext {
		public AlignmentCellContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alignmentCell; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.EnterAlignmentCell(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.ExitAlignmentCell(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPFVisitor<TResult> typedVisitor = visitor as IPFVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlignmentCell(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlignmentCellContext alignmentCell() {
		AlignmentCellContext _localctx = new AlignmentCellContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_alignmentCell);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 560;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__37) | (1L << T__33) | (1L << T__31) | (1L << T__29) | (1L << T__25) | (1L << T__23) | (1L << T__18) | (1L << T__10) | (1L << T__3))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SizeCellContext : ParserRuleContext {
		public SizeCellContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sizeCell; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.EnterSizeCell(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.ExitSizeCell(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPFVisitor<TResult> typedVisitor = visitor as IPFVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSizeCell(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SizeCellContext sizeCell() {
		SizeCellContext _localctx = new SizeCellContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_sizeCell);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 562;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__39) | (1L << T__26) | (1L << T__12) | (1L << T__8) | (1L << T__5) | (1L << T__2) | (1L << T__1) | (1L << T__0))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeCellContext : ParserRuleContext {
		public CellContext cell() {
			return GetRuleContext<CellContext>(0);
		}
		public TypeCellContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeCell; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.EnterTypeCell(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.ExitTypeCell(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPFVisitor<TResult> typedVisitor = visitor as IPFVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeCell(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeCellContext typeCell() {
		TypeCellContext _localctx = new TypeCellContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_typeCell);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 564; cell();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubtypeCellContext : ParserRuleContext {
		public CellContext cell() {
			return GetRuleContext<CellContext>(0);
		}
		public SubtypeCellContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subtypeCell; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.EnterSubtypeCell(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.ExitSubtypeCell(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPFVisitor<TResult> typedVisitor = visitor as IPFVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubtypeCell(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubtypeCellContext subtypeCell() {
		SubtypeCellContext _localctx = new SubtypeCellContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_subtypeCell);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 566; cell();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitCellContext : ParserRuleContext {
		public ITerminalNode QUOTE(int i) {
			return GetToken(PFParser.QUOTE, i);
		}
		public IReadOnlyList<ITerminalNode> QUOTE() { return GetTokens(PFParser.QUOTE); }
		public InitContext init() {
			return GetRuleContext<InitContext>(0);
		}
		public InitCellContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initCell; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.EnterInitCell(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.ExitInitCell(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPFVisitor<TResult> typedVisitor = visitor as IPFVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInitCell(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InitCellContext initCell() {
		InitCellContext _localctx = new InitCellContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_initCell);
		try {
			State = 573;
			switch (_input.La(1)) {
			case QUOTE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 568; Match(QUOTE);
				State = 569; init();
				State = 570; Match(QUOTE);
				}
				break;
			case T__35:
			case T__13:
			case NUMBER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 572; init();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitContext : ParserRuleContext {
		public PosNegNumberContext posNegNumber(int i) {
			return GetRuleContext<PosNegNumberContext>(i);
		}
		public ITerminalNode STRING() { return GetToken(PFParser.STRING, 0); }
		public IReadOnlyList<PosNegNumberContext> posNegNumber() {
			return GetRuleContexts<PosNegNumberContext>();
		}
		public InitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_init; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.EnterInit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.ExitInit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPFVisitor<TResult> typedVisitor = visitor as IPFVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InitContext init() {
		InitContext _localctx = new InitContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_init);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 575; posNegNumber();
			State = 577;
			_la = _input.La(1);
			if (_la==T__19) {
				{
				State = 576; Match(T__19);
				}
			}

			State = 584;
			_la = _input.La(1);
			if (_la==T__4) {
				{
				State = 579; Match(T__4);
				State = 580; posNegNumber();
				State = 582;
				_la = _input.La(1);
				if (_la==T__19) {
					{
					State = 581; Match(T__19);
					}
				}

				}
			}

			State = 587;
			_la = _input.La(1);
			if (_la==T__27) {
				{
				State = 586; Match(T__27);
				}
			}

			State = 596;
			switch ( Interpreter.AdaptivePredict(_input,17,_ctx) ) {
			case 1:
				{
				State = 589; Match(T__34);
				State = 590; posNegNumber();
				State = 591; Match(STRING);
				State = 592; Match(T__15);
				}
				break;

			case 2:
				{
				State = 594; Match(SEP);
				State = 595; Match(STRING);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SensesCellContext : ParserRuleContext {
		public ITerminalNode QUOTE(int i) {
			return GetToken(PFParser.QUOTE, i);
		}
		public IReadOnlyList<ITerminalNode> QUOTE() { return GetTokens(PFParser.QUOTE); }
		public SensesContext senses() {
			return GetRuleContext<SensesContext>(0);
		}
		public SensesCellContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sensesCell; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.EnterSensesCell(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.ExitSensesCell(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPFVisitor<TResult> typedVisitor = visitor as IPFVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSensesCell(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SensesCellContext sensesCell() {
		SensesCellContext _localctx = new SensesCellContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_sensesCell);
		try {
			State = 603;
			switch (_input.La(1)) {
			case QUOTE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 598; Match(QUOTE);
				State = 599; senses();
				State = 600; Match(QUOTE);
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 602; senses();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SensesContext : ParserRuleContext {
		public IReadOnlyList<SenseContext> sense() {
			return GetRuleContexts<SenseContext>();
		}
		public SenseContext sense(int i) {
			return GetRuleContext<SenseContext>(i);
		}
		public SkillContext skill() {
			return GetRuleContext<SkillContext>(0);
		}
		public ITerminalNode SEP(int i) {
			return GetToken(PFParser.SEP, i);
		}
		public IReadOnlyList<ITerminalNode> SEP() { return GetTokens(PFParser.SEP); }
		public SensesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_senses; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.EnterSenses(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.ExitSenses(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPFVisitor<TResult> typedVisitor = visitor as IPFVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSenses(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SensesContext senses() {
		SensesContext _localctx = new SensesContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_senses);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 615;
			switch ( Interpreter.AdaptivePredict(_input,20,_ctx) ) {
			case 1:
				{
				State = 605; sense();
				State = 610;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==SEP) {
					{
					{
					State = 606; Match(SEP);
					State = 607; sense();
					}
					}
					State = 612;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				{
				State = 613; Match(T__11);
				}
				}
				break;
			}
			State = 617; skill();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SenseContext : ParserRuleContext {
		public DistanceContext distance() {
			return GetRuleContext<DistanceContext>(0);
		}
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public SenseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sense; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.EnterSense(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.ExitSense(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPFVisitor<TResult> typedVisitor = visitor as IPFVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSense(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SenseContext sense() {
		SenseContext _localctx = new SenseContext(_ctx, State);
		EnterRule(_localctx, 50, RULE_sense);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 619; name();
			State = 621;
			_la = _input.La(1);
			if (_la==NUMBER) {
				{
				State = 620; distance();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AuraCellContext : ParserRuleContext {
		public CellContext cell() {
			return GetRuleContext<CellContext>(0);
		}
		public AuraCellContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_auraCell; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.EnterAuraCell(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.ExitAuraCell(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPFVisitor<TResult> typedVisitor = visitor as IPFVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAuraCell(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AuraCellContext auraCell() {
		AuraCellContext _localctx = new AuraCellContext(_ctx, State);
		EnterRule(_localctx, 52, RULE_auraCell);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 623; cell();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AcCellContext : ParserRuleContext {
		public ArmorClassTouchContext armorClassTouch() {
			return GetRuleContext<ArmorClassTouchContext>(0);
		}
		public ITerminalNode QUOTE(int i) {
			return GetToken(PFParser.QUOTE, i);
		}
		public ArmorClassContext armorClass() {
			return GetRuleContext<ArmorClassContext>(0);
		}
		public IReadOnlyList<ITerminalNode> QUOTE() { return GetTokens(PFParser.QUOTE); }
		public ArmorClassFlatFootedContext armorClassFlatFooted() {
			return GetRuleContext<ArmorClassFlatFootedContext>(0);
		}
		public ITerminalNode SEP(int i) {
			return GetToken(PFParser.SEP, i);
		}
		public IReadOnlyList<ITerminalNode> SEP() { return GetTokens(PFParser.SEP); }
		public AcCellContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_acCell; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.EnterAcCell(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.ExitAcCell(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPFVisitor<TResult> typedVisitor = visitor as IPFVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAcCell(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AcCellContext acCell() {
		AcCellContext _localctx = new AcCellContext(_ctx, State);
		EnterRule(_localctx, 54, RULE_acCell);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 625; Match(QUOTE);
			State = 626; armorClass();
			State = 627; Match(SEP);
			State = 628; armorClassTouch();
			State = 629; Match(SEP);
			State = 630; armorClassFlatFooted();
			State = 631; Match(QUOTE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArmorClassContext : ParserRuleContext {
		public ITerminalNode NUMBER() { return GetToken(PFParser.NUMBER, 0); }
		public ArmorClassContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_armorClass; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.EnterArmorClass(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.ExitArmorClass(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPFVisitor<TResult> typedVisitor = visitor as IPFVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArmorClass(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArmorClassContext armorClass() {
		ArmorClassContext _localctx = new ArmorClassContext(_ctx, State);
		EnterRule(_localctx, 56, RULE_armorClass);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 634;
			_la = _input.La(1);
			if (_la==T__38) {
				{
				State = 633; Match(T__38);
				}
			}

			State = 636; Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArmorClassTouchContext : ParserRuleContext {
		public ITerminalNode NUMBER() { return GetToken(PFParser.NUMBER, 0); }
		public ArmorClassTouchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_armorClassTouch; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.EnterArmorClassTouch(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.ExitArmorClassTouch(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPFVisitor<TResult> typedVisitor = visitor as IPFVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArmorClassTouch(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArmorClassTouchContext armorClassTouch() {
		ArmorClassTouchContext _localctx = new ArmorClassTouchContext(_ctx, State);
		EnterRule(_localctx, 58, RULE_armorClassTouch);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 638; Match(T__17);
			State = 639; Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArmorClassFlatFootedContext : ParserRuleContext {
		public ITerminalNode NUMBER() { return GetToken(PFParser.NUMBER, 0); }
		public ArmorClassFlatFootedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_armorClassFlatFooted; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.EnterArmorClassFlatFooted(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.ExitArmorClassFlatFooted(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPFVisitor<TResult> typedVisitor = visitor as IPFVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArmorClassFlatFooted(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArmorClassFlatFootedContext armorClassFlatFooted() {
		ArmorClassFlatFootedContext _localctx = new ArmorClassFlatFootedContext(_ctx, State);
		EnterRule(_localctx, 60, RULE_armorClassFlatFooted);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 641; Match(T__7);
			State = 642; Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ac_modsCellContext : ParserRuleContext {
		public ITerminalNode QUOTE(int i) {
			return GetToken(PFParser.QUOTE, i);
		}
		public IReadOnlyList<ITerminalNode> QUOTE() { return GetTokens(PFParser.QUOTE); }
		public Ac_modsContext ac_mods() {
			return GetRuleContext<Ac_modsContext>(0);
		}
		public Ac_modsCellContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ac_modsCell; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.EnterAc_modsCell(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.ExitAc_modsCell(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPFVisitor<TResult> typedVisitor = visitor as IPFVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAc_modsCell(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Ac_modsCellContext ac_modsCell() {
		Ac_modsCellContext _localctx = new Ac_modsCellContext(_ctx, State);
		EnterRule(_localctx, 62, RULE_ac_modsCell);
		try {
			State = 650;
			switch (_input.La(1)) {
			case T__34:
				EnterOuterAlt(_localctx, 1);
				{
				State = 644; ac_mods();
				}
				break;
			case QUOTE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 645; Match(QUOTE);
				State = 646; ac_mods();
				State = 647; Match(QUOTE);
				}
				break;
			case SEP:
				EnterOuterAlt(_localctx, 3);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ac_modsContext : ParserRuleContext {
		public IReadOnlyList<Ac_modSpecialContext> ac_modSpecial() {
			return GetRuleContexts<Ac_modSpecialContext>();
		}
		public Ac_modContext ac_mod(int i) {
			return GetRuleContext<Ac_modContext>(i);
		}
		public IReadOnlyList<Ac_modContext> ac_mod() {
			return GetRuleContexts<Ac_modContext>();
		}
		public Ac_modSpecialContext ac_modSpecial(int i) {
			return GetRuleContext<Ac_modSpecialContext>(i);
		}
		public ITerminalNode SEP(int i) {
			return GetToken(PFParser.SEP, i);
		}
		public IReadOnlyList<ITerminalNode> SEP() { return GetTokens(PFParser.SEP); }
		public Ac_modsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ac_mods; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.EnterAc_mods(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.ExitAc_mods(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPFVisitor<TResult> typedVisitor = visitor as IPFVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAc_mods(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Ac_modsContext ac_mods() {
		Ac_modsContext _localctx = new Ac_modsContext(_ctx, State);
		EnterRule(_localctx, 64, RULE_ac_mods);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 652; Match(T__34);
			State = 653; ac_mod();
			State = 658;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==SEP) {
				{
				{
				State = 654; Match(SEP);
				State = 655; ac_mod();
				}
				}
				State = 660;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 661; Match(T__15);
			State = 673;
			_la = _input.La(1);
			if (_la==T__34) {
				{
				State = 662; Match(T__34);
				State = 663; ac_modSpecial();
				State = 668;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==SEP) {
					{
					{
					State = 664; Match(SEP);
					State = 665; ac_modSpecial();
					}
					}
					State = 670;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 671; Match(T__15);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ac_modContext : ParserRuleContext {
		public ModifierContext modifier() {
			return GetRuleContext<ModifierContext>(0);
		}
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public Ac_modContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ac_mod; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.EnterAc_mod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.ExitAc_mod(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPFVisitor<TResult> typedVisitor = visitor as IPFVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAc_mod(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Ac_modContext ac_mod() {
		Ac_modContext _localctx = new Ac_modContext(_ctx, State);
		EnterRule(_localctx, 66, RULE_ac_mod);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 676;
			_la = _input.La(1);
			if (_la==T__27) {
				{
				State = 675; Match(T__27);
				}
			}

			State = 678; modifier();
			State = 679; name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ac_modSpecialContext : ParserRuleContext {
		public ITerminalNode STRING(int i) {
			return GetToken(PFParser.STRING, i);
		}
		public IReadOnlyList<ITerminalNode> STRING() { return GetTokens(PFParser.STRING); }
		public PosNegNumberContext posNegNumber() {
			return GetRuleContext<PosNegNumberContext>(0);
		}
		public Ac_modSpecialContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ac_modSpecial; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.EnterAc_modSpecial(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.ExitAc_modSpecial(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPFVisitor<TResult> typedVisitor = visitor as IPFVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAc_modSpecial(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Ac_modSpecialContext ac_modSpecial() {
		Ac_modSpecialContext _localctx = new Ac_modSpecialContext(_ctx, State);
		EnterRule(_localctx, 68, RULE_ac_modSpecial);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 681; posNegNumber();
			State = 683;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 682;
				_la = _input.La(1);
				if ( !(_la==T__14 || _la==STRING) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				}
				}
				State = 685;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==T__14 || _la==STRING );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HpCellContext : ParserRuleContext {
		public ITerminalNode NUMBER() { return GetToken(PFParser.NUMBER, 0); }
		public HpCellContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hpCell; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.EnterHpCell(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.ExitHpCell(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPFVisitor<TResult> typedVisitor = visitor as IPFVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHpCell(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HpCellContext hpCell() {
		HpCellContext _localctx = new HpCellContext(_ctx, State);
		EnterRule(_localctx, 70, RULE_hpCell);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 687; Match(NUMBER);
			State = 689;
			_la = _input.La(1);
			if (_la==T__36 || _la==T__30) {
				{
				State = 688;
				_la = _input.La(1);
				if ( !(_la==T__36 || _la==T__30) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HdCellContext : ParserRuleContext {
		public ITerminalNode QUOTE(int i) {
			return GetToken(PFParser.QUOTE, i);
		}
		public IReadOnlyList<ITerminalNode> QUOTE() { return GetTokens(PFParser.QUOTE); }
		public HdContext hd() {
			return GetRuleContext<HdContext>(0);
		}
		public HdCellContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hdCell; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.EnterHdCell(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.ExitHdCell(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPFVisitor<TResult> typedVisitor = visitor as IPFVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHdCell(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HdCellContext hdCell() {
		HdCellContext _localctx = new HdCellContext(_ctx, State);
		EnterRule(_localctx, 72, RULE_hdCell);
		try {
			State = 696;
			switch (_input.La(1)) {
			case T__34:
				EnterOuterAlt(_localctx, 1);
				{
				State = 691; hd();
				}
				break;
			case QUOTE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 692; Match(QUOTE);
				State = 693; hd();
				State = 694; Match(QUOTE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HdContext : ParserRuleContext {
		public DicesContext dices() {
			return GetRuleContext<DicesContext>(0);
		}
		public ITerminalNode NUMBER() { return GetToken(PFParser.NUMBER, 0); }
		public ITerminalNode SEP() { return GetToken(PFParser.SEP, 0); }
		public HdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hd; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.EnterHd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.ExitHd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPFVisitor<TResult> typedVisitor = visitor as IPFVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HdContext hd() {
		HdContext _localctx = new HdContext(_ctx, State);
		EnterRule(_localctx, 74, RULE_hd);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 698; Match(T__34);
			State = 705;
			switch ( Interpreter.AdaptivePredict(_input,32,_ctx) ) {
			case 1:
				{
				State = 699; Match(NUMBER);
				State = 700;
				_la = _input.La(1);
				if ( !(_la==T__28 || _la==T__22) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				State = 701;
				_la = _input.La(1);
				if ( !(_la==T__11 || _la==SEP) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				State = 703;
				_la = _input.La(1);
				if (_la==T__27) {
					{
					State = 702; Match(T__27);
					}
				}

				}
				break;
			}
			State = 707; dices();
			State = 708; Match(T__15);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Hp_modsCellContext : ParserRuleContext {
		public CellContext cell() {
			return GetRuleContext<CellContext>(0);
		}
		public Hp_modsCellContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hp_modsCell; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.EnterHp_modsCell(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.ExitHp_modsCell(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPFVisitor<TResult> typedVisitor = visitor as IPFVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHp_modsCell(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Hp_modsCellContext hp_modsCell() {
		Hp_modsCellContext _localctx = new Hp_modsCellContext(_ctx, State);
		EnterRule(_localctx, 76, RULE_hp_modsCell);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 710; cell();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SavesCellContext : ParserRuleContext {
		public ITerminalNode QUOTE(int i) {
			return GetToken(PFParser.QUOTE, i);
		}
		public IReadOnlyList<ITerminalNode> QUOTE() { return GetTokens(PFParser.QUOTE); }
		public SavesContext saves() {
			return GetRuleContext<SavesContext>(0);
		}
		public SavesCellContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_savesCell; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.EnterSavesCell(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.ExitSavesCell(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPFVisitor<TResult> typedVisitor = visitor as IPFVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSavesCell(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SavesCellContext savesCell() {
		SavesCellContext _localctx = new SavesCellContext(_ctx, State);
		EnterRule(_localctx, 78, RULE_savesCell);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 712; Match(QUOTE);
			State = 713; saves();
			State = 714; Match(QUOTE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SavesContext : ParserRuleContext {
		public SavesWillContext savesWill() {
			return GetRuleContext<SavesWillContext>(0);
		}
		public SavesFortContext savesFort() {
			return GetRuleContext<SavesFortContext>(0);
		}
		public QuotedTextContext quotedText() {
			return GetRuleContext<QuotedTextContext>(0);
		}
		public SavesRefContext savesRef() {
			return GetRuleContext<SavesRefContext>(0);
		}
		public SavesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_saves; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.EnterSaves(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.ExitSaves(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPFVisitor<TResult> typedVisitor = visitor as IPFVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSaves(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SavesContext saves() {
		SavesContext _localctx = new SavesContext(_ctx, State);
		EnterRule(_localctx, 80, RULE_saves);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 716; savesFort();
			State = 717; savesRef();
			State = 718; savesWill();
			State = 721;
			_la = _input.La(1);
			if (_la==T__11) {
				{
				State = 719; Match(T__11);
				State = 720; quotedText();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SavesFortContext : ParserRuleContext {
		public ModifierContext modifier() {
			return GetRuleContext<ModifierContext>(0);
		}
		public SavesFortContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_savesFort; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.EnterSavesFort(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.ExitSavesFort(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPFVisitor<TResult> typedVisitor = visitor as IPFVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSavesFort(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SavesFortContext savesFort() {
		SavesFortContext _localctx = new SavesFortContext(_ctx, State);
		EnterRule(_localctx, 82, RULE_savesFort);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 723; Match(T__9);
			State = 724; modifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SavesRefContext : ParserRuleContext {
		public ModifierContext modifier() {
			return GetRuleContext<ModifierContext>(0);
		}
		public SavesRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_savesRef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.EnterSavesRef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.ExitSavesRef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPFVisitor<TResult> typedVisitor = visitor as IPFVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSavesRef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SavesRefContext savesRef() {
		SavesRefContext _localctx = new SavesRefContext(_ctx, State);
		EnterRule(_localctx, 84, RULE_savesRef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 726; Match(T__21);
			State = 727; modifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SavesWillContext : ParserRuleContext {
		public ModifierContext modifier() {
			return GetRuleContext<ModifierContext>(0);
		}
		public SavesWillContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_savesWill; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.EnterSavesWill(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.ExitSavesWill(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPFVisitor<TResult> typedVisitor = visitor as IPFVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSavesWill(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SavesWillContext savesWill() {
		SavesWillContext _localctx = new SavesWillContext(_ctx, State);
		EnterRule(_localctx, 86, RULE_savesWill);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 729; Match(T__6);
			State = 730; modifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FortCellContext : ParserRuleContext {
		public CellContext cell() {
			return GetRuleContext<CellContext>(0);
		}
		public FortCellContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fortCell; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.EnterFortCell(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.ExitFortCell(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPFVisitor<TResult> typedVisitor = visitor as IPFVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFortCell(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FortCellContext fortCell() {
		FortCellContext _localctx = new FortCellContext(_ctx, State);
		EnterRule(_localctx, 88, RULE_fortCell);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 732; cell();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RefCellContext : ParserRuleContext {
		public CellContext cell() {
			return GetRuleContext<CellContext>(0);
		}
		public RefCellContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_refCell; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.EnterRefCell(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.ExitRefCell(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPFVisitor<TResult> typedVisitor = visitor as IPFVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRefCell(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RefCellContext refCell() {
		RefCellContext _localctx = new RefCellContext(_ctx, State);
		EnterRule(_localctx, 90, RULE_refCell);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 734; cell();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WillCellContext : ParserRuleContext {
		public CellContext cell() {
			return GetRuleContext<CellContext>(0);
		}
		public WillCellContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_willCell; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.EnterWillCell(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.ExitWillCell(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPFVisitor<TResult> typedVisitor = visitor as IPFVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWillCell(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WillCellContext willCell() {
		WillCellContext _localctx = new WillCellContext(_ctx, State);
		EnterRule(_localctx, 92, RULE_willCell);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 736; cell();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Save_modsCellContext : ParserRuleContext {
		public CellContext cell() {
			return GetRuleContext<CellContext>(0);
		}
		public Save_modsCellContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_save_modsCell; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.EnterSave_modsCell(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.ExitSave_modsCell(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPFVisitor<TResult> typedVisitor = visitor as IPFVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSave_modsCell(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Save_modsCellContext save_modsCell() {
		Save_modsCellContext _localctx = new Save_modsCellContext(_ctx, State);
		EnterRule(_localctx, 94, RULE_save_modsCell);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 738; cell();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefensiveabilitiesCellContext : ParserRuleContext {
		public CellContext cell() {
			return GetRuleContext<CellContext>(0);
		}
		public DefensiveabilitiesCellContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defensiveabilitiesCell; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.EnterDefensiveabilitiesCell(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.ExitDefensiveabilitiesCell(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPFVisitor<TResult> typedVisitor = visitor as IPFVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefensiveabilitiesCell(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefensiveabilitiesCellContext defensiveabilitiesCell() {
		DefensiveabilitiesCellContext _localctx = new DefensiveabilitiesCellContext(_ctx, State);
		EnterRule(_localctx, 96, RULE_defensiveabilitiesCell);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 740; cell();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DrCellContext : ParserRuleContext {
		public ITerminalNode QUOTE(int i) {
			return GetToken(PFParser.QUOTE, i);
		}
		public DrListContext drList() {
			return GetRuleContext<DrListContext>(0);
		}
		public IReadOnlyList<ITerminalNode> QUOTE() { return GetTokens(PFParser.QUOTE); }
		public DrContext dr() {
			return GetRuleContext<DrContext>(0);
		}
		public DrCellContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drCell; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.EnterDrCell(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.ExitDrCell(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPFVisitor<TResult> typedVisitor = visitor as IPFVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrCell(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DrCellContext drCell() {
		DrCellContext _localctx = new DrCellContext(_ctx, State);
		EnterRule(_localctx, 98, RULE_drCell);
		try {
			State = 748;
			switch (_input.La(1)) {
			case QUOTE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 742; Match(QUOTE);
				State = 743; drList();
				State = 744; Match(QUOTE);
				}
				break;
			case NUMBER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 746; dr();
				}
				break;
			case SEP:
				EnterOuterAlt(_localctx, 3);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DrListContext : ParserRuleContext {
		public DrContext dr(int i) {
			return GetRuleContext<DrContext>(i);
		}
		public IReadOnlyList<DrContext> dr() {
			return GetRuleContexts<DrContext>();
		}
		public DrListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.EnterDrList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.ExitDrList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPFVisitor<TResult> typedVisitor = visitor as IPFVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DrListContext drList() {
		DrListContext _localctx = new DrListContext(_ctx, State);
		EnterRule(_localctx, 100, RULE_drList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 750; dr();
			State = 755;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__20 || _la==SEP) {
				{
				{
				State = 751;
				_la = _input.La(1);
				if ( !(_la==T__20 || _la==SEP) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				State = 752; dr();
				}
				}
				State = 757;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DrContext : ParserRuleContext {
		public TextContext text() {
			return GetRuleContext<TextContext>(0);
		}
		public ITerminalNode NUMBER() { return GetToken(PFParser.NUMBER, 0); }
		public DrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.EnterDr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.ExitDr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPFVisitor<TResult> typedVisitor = visitor as IPFVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DrContext dr() {
		DrContext _localctx = new DrContext(_ctx, State);
		EnterRule(_localctx, 102, RULE_dr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 758; Match(NUMBER);
			State = 759; Match(T__4);
			State = 762;
			switch ( Interpreter.AdaptivePredict(_input,36,_ctx) ) {
			case 1:
				{
				State = 760; text();
				}
				break;

			case 2:
				{
				State = 761; Match(T__35);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImmuneCellContext : ParserRuleContext {
		public ImmuneListContext immuneList() {
			return GetRuleContext<ImmuneListContext>(0);
		}
		public ITerminalNode QUOTE(int i) {
			return GetToken(PFParser.QUOTE, i);
		}
		public ImmuneContext immune() {
			return GetRuleContext<ImmuneContext>(0);
		}
		public IReadOnlyList<ITerminalNode> QUOTE() { return GetTokens(PFParser.QUOTE); }
		public ImmuneCellContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_immuneCell; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.EnterImmuneCell(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.ExitImmuneCell(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPFVisitor<TResult> typedVisitor = visitor as IPFVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImmuneCell(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImmuneCellContext immuneCell() {
		ImmuneCellContext _localctx = new ImmuneCellContext(_ctx, State);
		EnterRule(_localctx, 104, RULE_immuneCell);
		try {
			State = 770;
			switch ( Interpreter.AdaptivePredict(_input,37,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 764; Match(QUOTE);
				State = 765; immuneList();
				State = 766; Match(QUOTE);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 768; immune();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImmuneListContext : ParserRuleContext {
		public IReadOnlyList<ImmuneContext> immune() {
			return GetRuleContexts<ImmuneContext>();
		}
		public ImmuneContext immune(int i) {
			return GetRuleContext<ImmuneContext>(i);
		}
		public ImmuneListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_immuneList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.EnterImmuneList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.ExitImmuneList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPFVisitor<TResult> typedVisitor = visitor as IPFVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImmuneList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImmuneListContext immuneList() {
		ImmuneListContext _localctx = new ImmuneListContext(_ctx, State);
		EnterRule(_localctx, 106, RULE_immuneList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 772; immune();
			State = 777;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__20 || _la==SEP) {
				{
				{
				State = 773;
				_la = _input.La(1);
				if ( !(_la==T__20 || _la==SEP) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				State = 774; immune();
				}
				}
				State = 779;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImmuneContext : ParserRuleContext {
		public TextContext text() {
			return GetRuleContext<TextContext>(0);
		}
		public ImmuneContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_immune; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.EnterImmune(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.ExitImmune(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPFVisitor<TResult> typedVisitor = visitor as IPFVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImmune(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImmuneContext immune() {
		ImmuneContext _localctx = new ImmuneContext(_ctx, State);
		EnterRule(_localctx, 108, RULE_immune);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 780; text();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResistCellContext : ParserRuleContext {
		public ResistContext resist() {
			return GetRuleContext<ResistContext>(0);
		}
		public RestistListContext restistList() {
			return GetRuleContext<RestistListContext>(0);
		}
		public ITerminalNode QUOTE(int i) {
			return GetToken(PFParser.QUOTE, i);
		}
		public IReadOnlyList<ITerminalNode> QUOTE() { return GetTokens(PFParser.QUOTE); }
		public ResistCellContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resistCell; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.EnterResistCell(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.ExitResistCell(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPFVisitor<TResult> typedVisitor = visitor as IPFVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResistCell(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ResistCellContext resistCell() {
		ResistCellContext _localctx = new ResistCellContext(_ctx, State);
		EnterRule(_localctx, 110, RULE_resistCell);
		try {
			State = 788;
			switch (_input.La(1)) {
			case QUOTE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 782; Match(QUOTE);
				State = 783; restistList();
				State = 784; Match(QUOTE);
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 786; resist();
				}
				break;
			case SEP:
				EnterOuterAlt(_localctx, 3);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RestistListContext : ParserRuleContext {
		public IReadOnlyList<ResistContext> resist() {
			return GetRuleContexts<ResistContext>();
		}
		public ResistContext resist(int i) {
			return GetRuleContext<ResistContext>(i);
		}
		public RestistListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_restistList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.EnterRestistList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.ExitRestistList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPFVisitor<TResult> typedVisitor = visitor as IPFVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRestistList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RestistListContext restistList() {
		RestistListContext _localctx = new RestistListContext(_ctx, State);
		EnterRule(_localctx, 112, RULE_restistList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 790; resist();
			State = 795;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__20 || _la==SEP) {
				{
				{
				State = 791;
				_la = _input.La(1);
				if ( !(_la==T__20 || _la==SEP) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				State = 792; resist();
				}
				}
				State = 797;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResistContext : ParserRuleContext {
		public ITerminalNode NUMBER() { return GetToken(PFParser.NUMBER, 0); }
		public ITerminalNode STRING() { return GetToken(PFParser.STRING, 0); }
		public ResistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resist; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.EnterResist(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.ExitResist(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPFVisitor<TResult> typedVisitor = visitor as IPFVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ResistContext resist() {
		ResistContext _localctx = new ResistContext(_ctx, State);
		EnterRule(_localctx, 114, RULE_resist);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 798; Match(STRING);
			State = 799; Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SrCellContext : ParserRuleContext {
		public ITerminalNode NUMBER() { return GetToken(PFParser.NUMBER, 0); }
		public SrCellContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_srCell; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.EnterSrCell(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.ExitSrCell(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPFVisitor<TResult> typedVisitor = visitor as IPFVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSrCell(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SrCellContext srCell() {
		SrCellContext _localctx = new SrCellContext(_ctx, State);
		EnterRule(_localctx, 116, RULE_srCell);
		try {
			State = 803;
			switch (_input.La(1)) {
			case NUMBER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 801; Match(NUMBER);
				}
				break;
			case SEP:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WeaknessesCellContext : ParserRuleContext {
		public CellContext cell() {
			return GetRuleContext<CellContext>(0);
		}
		public WeaknessesCellContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_weaknessesCell; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.EnterWeaknessesCell(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.ExitWeaknessesCell(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPFVisitor<TResult> typedVisitor = visitor as IPFVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWeaknessesCell(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WeaknessesCellContext weaknessesCell() {
		WeaknessesCellContext _localctx = new WeaknessesCellContext(_ctx, State);
		EnterRule(_localctx, 118, RULE_weaknessesCell);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 805; cell();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpeedCellContext : ParserRuleContext {
		public CellContext cell() {
			return GetRuleContext<CellContext>(0);
		}
		public SpeedCellContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_speedCell; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.EnterSpeedCell(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.ExitSpeedCell(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPFVisitor<TResult> typedVisitor = visitor as IPFVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpeedCell(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpeedCellContext speedCell() {
		SpeedCellContext _localctx = new SpeedCellContext(_ctx, State);
		EnterRule(_localctx, 120, RULE_speedCell);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 807; cell();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Speed_modCellContext : ParserRuleContext {
		public CellContext cell() {
			return GetRuleContext<CellContext>(0);
		}
		public Speed_modCellContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_speed_modCell; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.EnterSpeed_modCell(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.ExitSpeed_modCell(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPFVisitor<TResult> typedVisitor = visitor as IPFVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpeed_modCell(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Speed_modCellContext speed_modCell() {
		Speed_modCellContext _localctx = new Speed_modCellContext(_ctx, State);
		EnterRule(_localctx, 122, RULE_speed_modCell);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 809; cell();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MeleeCellContext : ParserRuleContext {
		public CellContext cell() {
			return GetRuleContext<CellContext>(0);
		}
		public MeleeCellContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_meleeCell; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.EnterMeleeCell(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.ExitMeleeCell(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPFVisitor<TResult> typedVisitor = visitor as IPFVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMeleeCell(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MeleeCellContext meleeCell() {
		MeleeCellContext _localctx = new MeleeCellContext(_ctx, State);
		EnterRule(_localctx, 124, RULE_meleeCell);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 811; cell();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangedCellContext : ParserRuleContext {
		public CellContext cell() {
			return GetRuleContext<CellContext>(0);
		}
		public RangedCellContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rangedCell; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.EnterRangedCell(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.ExitRangedCell(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPFVisitor<TResult> typedVisitor = visitor as IPFVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRangedCell(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RangedCellContext rangedCell() {
		RangedCellContext _localctx = new RangedCellContext(_ctx, State);
		EnterRule(_localctx, 126, RULE_rangedCell);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 813; cell();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpaceCellContext : ParserRuleContext {
		public CellContext cell() {
			return GetRuleContext<CellContext>(0);
		}
		public SpaceCellContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spaceCell; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.EnterSpaceCell(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.ExitSpaceCell(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPFVisitor<TResult> typedVisitor = visitor as IPFVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpaceCell(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpaceCellContext spaceCell() {
		SpaceCellContext _localctx = new SpaceCellContext(_ctx, State);
		EnterRule(_localctx, 128, RULE_spaceCell);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 815; cell();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReachCellContext : ParserRuleContext {
		public CellContext cell() {
			return GetRuleContext<CellContext>(0);
		}
		public ReachCellContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reachCell; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.EnterReachCell(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.ExitReachCell(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPFVisitor<TResult> typedVisitor = visitor as IPFVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReachCell(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReachCellContext reachCell() {
		ReachCellContext _localctx = new ReachCellContext(_ctx, State);
		EnterRule(_localctx, 130, RULE_reachCell);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 817; cell();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpecialattacksCellContext : ParserRuleContext {
		public CellContext cell() {
			return GetRuleContext<CellContext>(0);
		}
		public SpecialattacksCellContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_specialattacksCell; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.EnterSpecialattacksCell(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.ExitSpecialattacksCell(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPFVisitor<TResult> typedVisitor = visitor as IPFVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpecialattacksCell(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpecialattacksCellContext specialattacksCell() {
		SpecialattacksCellContext _localctx = new SpecialattacksCellContext(_ctx, State);
		EnterRule(_localctx, 132, RULE_specialattacksCell);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 819; cell();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpelllikeabilitiesCellContext : ParserRuleContext {
		public CellContext cell() {
			return GetRuleContext<CellContext>(0);
		}
		public SpelllikeabilitiesCellContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spelllikeabilitiesCell; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.EnterSpelllikeabilitiesCell(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.ExitSpelllikeabilitiesCell(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPFVisitor<TResult> typedVisitor = visitor as IPFVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpelllikeabilitiesCell(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpelllikeabilitiesCellContext spelllikeabilitiesCell() {
		SpelllikeabilitiesCellContext _localctx = new SpelllikeabilitiesCellContext(_ctx, State);
		EnterRule(_localctx, 134, RULE_spelllikeabilitiesCell);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 821; cell();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpellsknownCellContext : ParserRuleContext {
		public CellContext cell() {
			return GetRuleContext<CellContext>(0);
		}
		public SpellsknownCellContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spellsknownCell; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.EnterSpellsknownCell(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.ExitSpellsknownCell(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPFVisitor<TResult> typedVisitor = visitor as IPFVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpellsknownCell(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpellsknownCellContext spellsknownCell() {
		SpellsknownCellContext _localctx = new SpellsknownCellContext(_ctx, State);
		EnterRule(_localctx, 136, RULE_spellsknownCell);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 823; cell();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpellspreparedCellContext : ParserRuleContext {
		public CellContext cell() {
			return GetRuleContext<CellContext>(0);
		}
		public SpellspreparedCellContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spellspreparedCell; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.EnterSpellspreparedCell(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.ExitSpellspreparedCell(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPFVisitor<TResult> typedVisitor = visitor as IPFVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpellspreparedCell(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpellspreparedCellContext spellspreparedCell() {
		SpellspreparedCellContext _localctx = new SpellspreparedCellContext(_ctx, State);
		EnterRule(_localctx, 138, RULE_spellspreparedCell);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 825; cell();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpelldomainsCellContext : ParserRuleContext {
		public CellContext cell() {
			return GetRuleContext<CellContext>(0);
		}
		public SpelldomainsCellContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spelldomainsCell; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.EnterSpelldomainsCell(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.ExitSpelldomainsCell(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPFVisitor<TResult> typedVisitor = visitor as IPFVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpelldomainsCell(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpelldomainsCellContext spelldomainsCell() {
		SpelldomainsCellContext _localctx = new SpelldomainsCellContext(_ctx, State);
		EnterRule(_localctx, 140, RULE_spelldomainsCell);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 827; cell();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AbilityscoresCellContext : ParserRuleContext {
		public CellContext cell() {
			return GetRuleContext<CellContext>(0);
		}
		public AbilityscoresCellContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_abilityscoresCell; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.EnterAbilityscoresCell(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.ExitAbilityscoresCell(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPFVisitor<TResult> typedVisitor = visitor as IPFVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAbilityscoresCell(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AbilityscoresCellContext abilityscoresCell() {
		AbilityscoresCellContext _localctx = new AbilityscoresCellContext(_ctx, State);
		EnterRule(_localctx, 142, RULE_abilityscoresCell);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 829; cell();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Abilityscore_modsCellContext : ParserRuleContext {
		public CellContext cell() {
			return GetRuleContext<CellContext>(0);
		}
		public Abilityscore_modsCellContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_abilityscore_modsCell; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.EnterAbilityscore_modsCell(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.ExitAbilityscore_modsCell(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPFVisitor<TResult> typedVisitor = visitor as IPFVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAbilityscore_modsCell(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Abilityscore_modsCellContext abilityscore_modsCell() {
		Abilityscore_modsCellContext _localctx = new Abilityscore_modsCellContext(_ctx, State);
		EnterRule(_localctx, 144, RULE_abilityscore_modsCell);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 831; cell();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BaseatkCellContext : ParserRuleContext {
		public CellContext cell() {
			return GetRuleContext<CellContext>(0);
		}
		public BaseatkCellContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_baseatkCell; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.EnterBaseatkCell(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.ExitBaseatkCell(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPFVisitor<TResult> typedVisitor = visitor as IPFVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBaseatkCell(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BaseatkCellContext baseatkCell() {
		BaseatkCellContext _localctx = new BaseatkCellContext(_ctx, State);
		EnterRule(_localctx, 146, RULE_baseatkCell);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 833; cell();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CmbCellContext : ParserRuleContext {
		public CellContext cell() {
			return GetRuleContext<CellContext>(0);
		}
		public CmbCellContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cmbCell; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.EnterCmbCell(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.ExitCmbCell(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPFVisitor<TResult> typedVisitor = visitor as IPFVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCmbCell(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CmbCellContext cmbCell() {
		CmbCellContext _localctx = new CmbCellContext(_ctx, State);
		EnterRule(_localctx, 148, RULE_cmbCell);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 835; cell();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CmdCellContext : ParserRuleContext {
		public CellContext cell() {
			return GetRuleContext<CellContext>(0);
		}
		public CmdCellContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cmdCell; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.EnterCmdCell(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.ExitCmdCell(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPFVisitor<TResult> typedVisitor = visitor as IPFVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCmdCell(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CmdCellContext cmdCell() {
		CmdCellContext _localctx = new CmdCellContext(_ctx, State);
		EnterRule(_localctx, 150, RULE_cmdCell);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 837; cell();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FeatsCellContext : ParserRuleContext {
		public CellContext cell() {
			return GetRuleContext<CellContext>(0);
		}
		public FeatsCellContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_featsCell; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.EnterFeatsCell(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.ExitFeatsCell(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPFVisitor<TResult> typedVisitor = visitor as IPFVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFeatsCell(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FeatsCellContext featsCell() {
		FeatsCellContext _localctx = new FeatsCellContext(_ctx, State);
		EnterRule(_localctx, 152, RULE_featsCell);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 839; cell();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SkillsCellContext : ParserRuleContext {
		public ITerminalNode QUOTE(int i) {
			return GetToken(PFParser.QUOTE, i);
		}
		public IReadOnlyList<ITerminalNode> QUOTE() { return GetTokens(PFParser.QUOTE); }
		public SkillsContext skills() {
			return GetRuleContext<SkillsContext>(0);
		}
		public SkillsCellContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_skillsCell; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.EnterSkillsCell(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.ExitSkillsCell(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPFVisitor<TResult> typedVisitor = visitor as IPFVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSkillsCell(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SkillsCellContext skillsCell() {
		SkillsCellContext _localctx = new SkillsCellContext(_ctx, State);
		EnterRule(_localctx, 154, RULE_skillsCell);
		try {
			State = 846;
			switch ( Interpreter.AdaptivePredict(_input,42,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 841; skills();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 842; Match(QUOTE);
				State = 843; skills();
				State = 844; Match(QUOTE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SkillsContext : ParserRuleContext {
		public SkillContext skill(int i) {
			return GetRuleContext<SkillContext>(i);
		}
		public IReadOnlyList<SkillContext> skill() {
			return GetRuleContexts<SkillContext>();
		}
		public ITerminalNode SEP(int i) {
			return GetToken(PFParser.SEP, i);
		}
		public IReadOnlyList<ITerminalNode> SEP() { return GetTokens(PFParser.SEP); }
		public SkillsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_skills; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.EnterSkills(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.ExitSkills(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPFVisitor<TResult> typedVisitor = visitor as IPFVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSkills(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SkillsContext skills() {
		SkillsContext _localctx = new SkillsContext(_ctx, State);
		EnterRule(_localctx, 156, RULE_skills);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 856;
			_la = _input.La(1);
			if (_la==STRING) {
				{
				State = 848; skill();
				State = 853;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,43,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 849; Match(SEP);
						State = 850; skill();
						}
						} 
					}
					State = 855;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,43,_ctx);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RacialmodsCellContext : ParserRuleContext {
		public CellContext cell() {
			return GetRuleContext<CellContext>(0);
		}
		public RacialmodsCellContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_racialmodsCell; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.EnterRacialmodsCell(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.ExitRacialmodsCell(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPFVisitor<TResult> typedVisitor = visitor as IPFVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRacialmodsCell(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RacialmodsCellContext racialmodsCell() {
		RacialmodsCellContext _localctx = new RacialmodsCellContext(_ctx, State);
		EnterRule(_localctx, 158, RULE_racialmodsCell);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 858; cell();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LanguagesCellContext : ParserRuleContext {
		public CellContext cell() {
			return GetRuleContext<CellContext>(0);
		}
		public LanguagesCellContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_languagesCell; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.EnterLanguagesCell(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.ExitLanguagesCell(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPFVisitor<TResult> typedVisitor = visitor as IPFVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLanguagesCell(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LanguagesCellContext languagesCell() {
		LanguagesCellContext _localctx = new LanguagesCellContext(_ctx, State);
		EnterRule(_localctx, 160, RULE_languagesCell);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 860; cell();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SqCellContext : ParserRuleContext {
		public CellContext cell() {
			return GetRuleContext<CellContext>(0);
		}
		public SqCellContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sqCell; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.EnterSqCell(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.ExitSqCell(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPFVisitor<TResult> typedVisitor = visitor as IPFVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSqCell(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SqCellContext sqCell() {
		SqCellContext _localctx = new SqCellContext(_ctx, State);
		EnterRule(_localctx, 162, RULE_sqCell);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 862; cell();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnvironmentCellContext : ParserRuleContext {
		public CellContext cell() {
			return GetRuleContext<CellContext>(0);
		}
		public EnvironmentCellContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_environmentCell; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.EnterEnvironmentCell(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.ExitEnvironmentCell(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPFVisitor<TResult> typedVisitor = visitor as IPFVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnvironmentCell(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnvironmentCellContext environmentCell() {
		EnvironmentCellContext _localctx = new EnvironmentCellContext(_ctx, State);
		EnterRule(_localctx, 164, RULE_environmentCell);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 864; cell();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrganizationCellContext : ParserRuleContext {
		public CellContext cell() {
			return GetRuleContext<CellContext>(0);
		}
		public OrganizationCellContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_organizationCell; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.EnterOrganizationCell(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.ExitOrganizationCell(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPFVisitor<TResult> typedVisitor = visitor as IPFVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrganizationCell(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrganizationCellContext organizationCell() {
		OrganizationCellContext _localctx = new OrganizationCellContext(_ctx, State);
		EnterRule(_localctx, 166, RULE_organizationCell);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 866; cell();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TreasureCellContext : ParserRuleContext {
		public CellContext cell() {
			return GetRuleContext<CellContext>(0);
		}
		public TreasureCellContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_treasureCell; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.EnterTreasureCell(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.ExitTreasureCell(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPFVisitor<TResult> typedVisitor = visitor as IPFVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTreasureCell(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TreasureCellContext treasureCell() {
		TreasureCellContext _localctx = new TreasureCellContext(_ctx, State);
		EnterRule(_localctx, 168, RULE_treasureCell);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 868; cell();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Description_visualCellContext : ParserRuleContext {
		public CellContext cell() {
			return GetRuleContext<CellContext>(0);
		}
		public Description_visualCellContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_description_visualCell; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.EnterDescription_visualCell(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.ExitDescription_visualCell(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPFVisitor<TResult> typedVisitor = visitor as IPFVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDescription_visualCell(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Description_visualCellContext description_visualCell() {
		Description_visualCellContext _localctx = new Description_visualCellContext(_ctx, State);
		EnterRule(_localctx, 170, RULE_description_visualCell);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 870; cell();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupCellContext : ParserRuleContext {
		public CellContext cell() {
			return GetRuleContext<CellContext>(0);
		}
		public GroupCellContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_groupCell; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.EnterGroupCell(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.ExitGroupCell(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPFVisitor<TResult> typedVisitor = visitor as IPFVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroupCell(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GroupCellContext groupCell() {
		GroupCellContext _localctx = new GroupCellContext(_ctx, State);
		EnterRule(_localctx, 172, RULE_groupCell);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 872; cell();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SourceCellContext : ParserRuleContext {
		public CellContext cell() {
			return GetRuleContext<CellContext>(0);
		}
		public SourceCellContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sourceCell; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.EnterSourceCell(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.ExitSourceCell(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPFVisitor<TResult> typedVisitor = visitor as IPFVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSourceCell(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SourceCellContext sourceCell() {
		SourceCellContext _localctx = new SourceCellContext(_ctx, State);
		EnterRule(_localctx, 174, RULE_sourceCell);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 874; cell();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IstemplateCellContext : ParserRuleContext {
		public CellContext cell() {
			return GetRuleContext<CellContext>(0);
		}
		public IstemplateCellContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_istemplateCell; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.EnterIstemplateCell(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.ExitIstemplateCell(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPFVisitor<TResult> typedVisitor = visitor as IPFVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIstemplateCell(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IstemplateCellContext istemplateCell() {
		IstemplateCellContext _localctx = new IstemplateCellContext(_ctx, State);
		EnterRule(_localctx, 176, RULE_istemplateCell);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 876; cell();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpecialabilitiesCellContext : ParserRuleContext {
		public CellContext cell() {
			return GetRuleContext<CellContext>(0);
		}
		public SpecialabilitiesCellContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_specialabilitiesCell; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.EnterSpecialabilitiesCell(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.ExitSpecialabilitiesCell(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPFVisitor<TResult> typedVisitor = visitor as IPFVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpecialabilitiesCell(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpecialabilitiesCellContext specialabilitiesCell() {
		SpecialabilitiesCellContext _localctx = new SpecialabilitiesCellContext(_ctx, State);
		EnterRule(_localctx, 178, RULE_specialabilitiesCell);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 878; cell();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DescriptionCellContext : ParserRuleContext {
		public CellContext cell() {
			return GetRuleContext<CellContext>(0);
		}
		public DescriptionCellContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_descriptionCell; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.EnterDescriptionCell(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.ExitDescriptionCell(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPFVisitor<TResult> typedVisitor = visitor as IPFVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDescriptionCell(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DescriptionCellContext descriptionCell() {
		DescriptionCellContext _localctx = new DescriptionCellContext(_ctx, State);
		EnterRule(_localctx, 180, RULE_descriptionCell);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 880; cell();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FulltextCellContext : ParserRuleContext {
		public CellContext cell() {
			return GetRuleContext<CellContext>(0);
		}
		public FulltextCellContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fulltextCell; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.EnterFulltextCell(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.ExitFulltextCell(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPFVisitor<TResult> typedVisitor = visitor as IPFVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFulltextCell(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FulltextCellContext fulltextCell() {
		FulltextCellContext _localctx = new FulltextCellContext(_ctx, State);
		EnterRule(_localctx, 182, RULE_fulltextCell);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 882; cell();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenderCellContext : ParserRuleContext {
		public CellContext cell() {
			return GetRuleContext<CellContext>(0);
		}
		public GenderCellContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genderCell; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.EnterGenderCell(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.ExitGenderCell(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPFVisitor<TResult> typedVisitor = visitor as IPFVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGenderCell(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GenderCellContext genderCell() {
		GenderCellContext _localctx = new GenderCellContext(_ctx, State);
		EnterRule(_localctx, 184, RULE_genderCell);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 884; cell();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BloodlineCellContext : ParserRuleContext {
		public CellContext cell() {
			return GetRuleContext<CellContext>(0);
		}
		public BloodlineCellContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bloodlineCell; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.EnterBloodlineCell(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.ExitBloodlineCell(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPFVisitor<TResult> typedVisitor = visitor as IPFVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBloodlineCell(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BloodlineCellContext bloodlineCell() {
		BloodlineCellContext _localctx = new BloodlineCellContext(_ctx, State);
		EnterRule(_localctx, 186, RULE_bloodlineCell);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 886; cell();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProhibitedschoolsCellContext : ParserRuleContext {
		public CellContext cell() {
			return GetRuleContext<CellContext>(0);
		}
		public ProhibitedschoolsCellContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prohibitedschoolsCell; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.EnterProhibitedschoolsCell(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.ExitProhibitedschoolsCell(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPFVisitor<TResult> typedVisitor = visitor as IPFVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProhibitedschoolsCell(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProhibitedschoolsCellContext prohibitedschoolsCell() {
		ProhibitedschoolsCellContext _localctx = new ProhibitedschoolsCellContext(_ctx, State);
		EnterRule(_localctx, 188, RULE_prohibitedschoolsCell);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 888; cell();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BeforecombatCellContext : ParserRuleContext {
		public CellContext cell() {
			return GetRuleContext<CellContext>(0);
		}
		public BeforecombatCellContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_beforecombatCell; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.EnterBeforecombatCell(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.ExitBeforecombatCell(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPFVisitor<TResult> typedVisitor = visitor as IPFVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBeforecombatCell(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BeforecombatCellContext beforecombatCell() {
		BeforecombatCellContext _localctx = new BeforecombatCellContext(_ctx, State);
		EnterRule(_localctx, 190, RULE_beforecombatCell);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 890; cell();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DuringcombatCellContext : ParserRuleContext {
		public CellContext cell() {
			return GetRuleContext<CellContext>(0);
		}
		public DuringcombatCellContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_duringcombatCell; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.EnterDuringcombatCell(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.ExitDuringcombatCell(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPFVisitor<TResult> typedVisitor = visitor as IPFVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDuringcombatCell(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DuringcombatCellContext duringcombatCell() {
		DuringcombatCellContext _localctx = new DuringcombatCellContext(_ctx, State);
		EnterRule(_localctx, 192, RULE_duringcombatCell);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 892; cell();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MoraleCellContext : ParserRuleContext {
		public CellContext cell() {
			return GetRuleContext<CellContext>(0);
		}
		public MoraleCellContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moraleCell; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.EnterMoraleCell(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.ExitMoraleCell(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPFVisitor<TResult> typedVisitor = visitor as IPFVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMoraleCell(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MoraleCellContext moraleCell() {
		MoraleCellContext _localctx = new MoraleCellContext(_ctx, State);
		EnterRule(_localctx, 194, RULE_moraleCell);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 894; cell();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GearCellContext : ParserRuleContext {
		public CellContext cell() {
			return GetRuleContext<CellContext>(0);
		}
		public GearCellContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gearCell; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.EnterGearCell(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.ExitGearCell(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPFVisitor<TResult> typedVisitor = visitor as IPFVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGearCell(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GearCellContext gearCell() {
		GearCellContext _localctx = new GearCellContext(_ctx, State);
		EnterRule(_localctx, 196, RULE_gearCell);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 896; cell();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OthergearCellContext : ParserRuleContext {
		public CellContext cell() {
			return GetRuleContext<CellContext>(0);
		}
		public OthergearCellContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_othergearCell; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.EnterOthergearCell(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.ExitOthergearCell(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPFVisitor<TResult> typedVisitor = visitor as IPFVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOthergearCell(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OthergearCellContext othergearCell() {
		OthergearCellContext _localctx = new OthergearCellContext(_ctx, State);
		EnterRule(_localctx, 198, RULE_othergearCell);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 898; cell();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VulnerabilityCellContext : ParserRuleContext {
		public CellContext cell() {
			return GetRuleContext<CellContext>(0);
		}
		public VulnerabilityCellContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vulnerabilityCell; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.EnterVulnerabilityCell(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.ExitVulnerabilityCell(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPFVisitor<TResult> typedVisitor = visitor as IPFVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVulnerabilityCell(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VulnerabilityCellContext vulnerabilityCell() {
		VulnerabilityCellContext _localctx = new VulnerabilityCellContext(_ctx, State);
		EnterRule(_localctx, 200, RULE_vulnerabilityCell);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 900; cell();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NoteCellContext : ParserRuleContext {
		public CellContext cell() {
			return GetRuleContext<CellContext>(0);
		}
		public NoteCellContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_noteCell; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.EnterNoteCell(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.ExitNoteCell(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPFVisitor<TResult> typedVisitor = visitor as IPFVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNoteCell(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NoteCellContext noteCell() {
		NoteCellContext _localctx = new NoteCellContext(_ctx, State);
		EnterRule(_localctx, 202, RULE_noteCell);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 902; cell();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CharacterflagCellContext : ParserRuleContext {
		public CellContext cell() {
			return GetRuleContext<CellContext>(0);
		}
		public CharacterflagCellContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_characterflagCell; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.EnterCharacterflagCell(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.ExitCharacterflagCell(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPFVisitor<TResult> typedVisitor = visitor as IPFVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCharacterflagCell(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CharacterflagCellContext characterflagCell() {
		CharacterflagCellContext _localctx = new CharacterflagCellContext(_ctx, State);
		EnterRule(_localctx, 204, RULE_characterflagCell);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 904; cell();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompanionflagCellContext : ParserRuleContext {
		public CellContext cell() {
			return GetRuleContext<CellContext>(0);
		}
		public CompanionflagCellContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_companionflagCell; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.EnterCompanionflagCell(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.ExitCompanionflagCell(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPFVisitor<TResult> typedVisitor = visitor as IPFVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompanionflagCell(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompanionflagCellContext companionflagCell() {
		CompanionflagCellContext _localctx = new CompanionflagCellContext(_ctx, State);
		EnterRule(_localctx, 206, RULE_companionflagCell);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 906; cell();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FlyCellContext : ParserRuleContext {
		public CellContext cell() {
			return GetRuleContext<CellContext>(0);
		}
		public FlyCellContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_flyCell; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.EnterFlyCell(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.ExitFlyCell(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPFVisitor<TResult> typedVisitor = visitor as IPFVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFlyCell(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FlyCellContext flyCell() {
		FlyCellContext _localctx = new FlyCellContext(_ctx, State);
		EnterRule(_localctx, 208, RULE_flyCell);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 908; cell();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClimbCellContext : ParserRuleContext {
		public CellContext cell() {
			return GetRuleContext<CellContext>(0);
		}
		public ClimbCellContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_climbCell; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.EnterClimbCell(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.ExitClimbCell(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPFVisitor<TResult> typedVisitor = visitor as IPFVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClimbCell(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClimbCellContext climbCell() {
		ClimbCellContext _localctx = new ClimbCellContext(_ctx, State);
		EnterRule(_localctx, 210, RULE_climbCell);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 910; cell();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BurrowCellContext : ParserRuleContext {
		public CellContext cell() {
			return GetRuleContext<CellContext>(0);
		}
		public BurrowCellContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_burrowCell; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.EnterBurrowCell(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.ExitBurrowCell(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPFVisitor<TResult> typedVisitor = visitor as IPFVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBurrowCell(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BurrowCellContext burrowCell() {
		BurrowCellContext _localctx = new BurrowCellContext(_ctx, State);
		EnterRule(_localctx, 212, RULE_burrowCell);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 912; cell();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwimCellContext : ParserRuleContext {
		public CellContext cell() {
			return GetRuleContext<CellContext>(0);
		}
		public SwimCellContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_swimCell; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.EnterSwimCell(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.ExitSwimCell(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPFVisitor<TResult> typedVisitor = visitor as IPFVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwimCell(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwimCellContext swimCell() {
		SwimCellContext _localctx = new SwimCellContext(_ctx, State);
		EnterRule(_localctx, 214, RULE_swimCell);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 914; cell();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LandCellContext : ParserRuleContext {
		public CellContext cell() {
			return GetRuleContext<CellContext>(0);
		}
		public LandCellContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_landCell; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.EnterLandCell(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.ExitLandCell(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPFVisitor<TResult> typedVisitor = visitor as IPFVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLandCell(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LandCellContext landCell() {
		LandCellContext _localctx = new LandCellContext(_ctx, State);
		EnterRule(_localctx, 216, RULE_landCell);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 916; cell();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplatesappliedCellContext : ParserRuleContext {
		public CellContext cell() {
			return GetRuleContext<CellContext>(0);
		}
		public TemplatesappliedCellContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templatesappliedCell; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.EnterTemplatesappliedCell(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.ExitTemplatesappliedCell(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPFVisitor<TResult> typedVisitor = visitor as IPFVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplatesappliedCell(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplatesappliedCellContext templatesappliedCell() {
		TemplatesappliedCellContext _localctx = new TemplatesappliedCellContext(_ctx, State);
		EnterRule(_localctx, 218, RULE_templatesappliedCell);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 918; cell();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OffensenoteCellContext : ParserRuleContext {
		public CellContext cell() {
			return GetRuleContext<CellContext>(0);
		}
		public OffensenoteCellContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_offensenoteCell; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.EnterOffensenoteCell(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.ExitOffensenoteCell(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPFVisitor<TResult> typedVisitor = visitor as IPFVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOffensenoteCell(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OffensenoteCellContext offensenoteCell() {
		OffensenoteCellContext _localctx = new OffensenoteCellContext(_ctx, State);
		EnterRule(_localctx, 220, RULE_offensenoteCell);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 920; cell();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BasestatisticsCellContext : ParserRuleContext {
		public CellContext cell() {
			return GetRuleContext<CellContext>(0);
		}
		public BasestatisticsCellContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_basestatisticsCell; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.EnterBasestatisticsCell(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.ExitBasestatisticsCell(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPFVisitor<TResult> typedVisitor = visitor as IPFVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBasestatisticsCell(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BasestatisticsCellContext basestatisticsCell() {
		BasestatisticsCellContext _localctx = new BasestatisticsCellContext(_ctx, State);
		EnterRule(_localctx, 222, RULE_basestatisticsCell);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 922; cell();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExtractspreparedCellContext : ParserRuleContext {
		public CellContext cell() {
			return GetRuleContext<CellContext>(0);
		}
		public ExtractspreparedCellContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_extractspreparedCell; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.EnterExtractspreparedCell(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.ExitExtractspreparedCell(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPFVisitor<TResult> typedVisitor = visitor as IPFVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExtractspreparedCell(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExtractspreparedCellContext extractspreparedCell() {
		ExtractspreparedCellContext _localctx = new ExtractspreparedCellContext(_ctx, State);
		EnterRule(_localctx, 224, RULE_extractspreparedCell);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 924; cell();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AgecategoryCellContext : ParserRuleContext {
		public CellContext cell() {
			return GetRuleContext<CellContext>(0);
		}
		public AgecategoryCellContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_agecategoryCell; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.EnterAgecategoryCell(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.ExitAgecategoryCell(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPFVisitor<TResult> typedVisitor = visitor as IPFVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAgecategoryCell(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AgecategoryCellContext agecategoryCell() {
		AgecategoryCellContext _localctx = new AgecategoryCellContext(_ctx, State);
		EnterRule(_localctx, 226, RULE_agecategoryCell);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 926; cell();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MysteryCellContext : ParserRuleContext {
		public CellContext cell() {
			return GetRuleContext<CellContext>(0);
		}
		public MysteryCellContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mysteryCell; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.EnterMysteryCell(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.ExitMysteryCell(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPFVisitor<TResult> typedVisitor = visitor as IPFVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMysteryCell(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MysteryCellContext mysteryCell() {
		MysteryCellContext _localctx = new MysteryCellContext(_ctx, State);
		EnterRule(_localctx, 228, RULE_mysteryCell);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 928; cell();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassarchetypesCellContext : ParserRuleContext {
		public CellContext cell() {
			return GetRuleContext<CellContext>(0);
		}
		public ClassarchetypesCellContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classarchetypesCell; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.EnterClassarchetypesCell(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.ExitClassarchetypesCell(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPFVisitor<TResult> typedVisitor = visitor as IPFVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassarchetypesCell(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassarchetypesCellContext classarchetypesCell() {
		ClassarchetypesCellContext _localctx = new ClassarchetypesCellContext(_ctx, State);
		EnterRule(_localctx, 230, RULE_classarchetypesCell);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 930; cell();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PatronCellContext : ParserRuleContext {
		public CellContext cell() {
			return GetRuleContext<CellContext>(0);
		}
		public PatronCellContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_patronCell; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.EnterPatronCell(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.ExitPatronCell(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPFVisitor<TResult> typedVisitor = visitor as IPFVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPatronCell(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PatronCellContext patronCell() {
		PatronCellContext _localctx = new PatronCellContext(_ctx, State);
		EnterRule(_localctx, 232, RULE_patronCell);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 932; cell();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompanionfamiliarlinkCellContext : ParserRuleContext {
		public CellContext cell() {
			return GetRuleContext<CellContext>(0);
		}
		public CompanionfamiliarlinkCellContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_companionfamiliarlinkCell; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.EnterCompanionfamiliarlinkCell(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.ExitCompanionfamiliarlinkCell(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPFVisitor<TResult> typedVisitor = visitor as IPFVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompanionfamiliarlinkCell(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompanionfamiliarlinkCellContext companionfamiliarlinkCell() {
		CompanionfamiliarlinkCellContext _localctx = new CompanionfamiliarlinkCellContext(_ctx, State);
		EnterRule(_localctx, 234, RULE_companionfamiliarlinkCell);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 934; cell();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FocusedschoolCellContext : ParserRuleContext {
		public CellContext cell() {
			return GetRuleContext<CellContext>(0);
		}
		public FocusedschoolCellContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_focusedschoolCell; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.EnterFocusedschoolCell(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.ExitFocusedschoolCell(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPFVisitor<TResult> typedVisitor = visitor as IPFVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFocusedschoolCell(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FocusedschoolCellContext focusedschoolCell() {
		FocusedschoolCellContext _localctx = new FocusedschoolCellContext(_ctx, State);
		EnterRule(_localctx, 236, RULE_focusedschoolCell);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 936; cell();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TraitsCellContext : ParserRuleContext {
		public CellContext cell() {
			return GetRuleContext<CellContext>(0);
		}
		public TraitsCellContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_traitsCell; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.EnterTraitsCell(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.ExitTraitsCell(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPFVisitor<TResult> typedVisitor = visitor as IPFVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTraitsCell(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TraitsCellContext traitsCell() {
		TraitsCellContext _localctx = new TraitsCellContext(_ctx, State);
		EnterRule(_localctx, 238, RULE_traitsCell);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 938; cell();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlternatenameformCellContext : ParserRuleContext {
		public CellContext cell() {
			return GetRuleContext<CellContext>(0);
		}
		public AlternatenameformCellContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alternatenameformCell; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.EnterAlternatenameformCell(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.ExitAlternatenameformCell(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPFVisitor<TResult> typedVisitor = visitor as IPFVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlternatenameformCell(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlternatenameformCellContext alternatenameformCell() {
		AlternatenameformCellContext _localctx = new AlternatenameformCellContext(_ctx, State);
		EnterRule(_localctx, 240, RULE_alternatenameformCell);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 940; cell();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LinktextCellContext : ParserRuleContext {
		public CellContext cell() {
			return GetRuleContext<CellContext>(0);
		}
		public LinktextCellContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_linktextCell; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.EnterLinktextCell(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.ExitLinktextCell(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPFVisitor<TResult> typedVisitor = visitor as IPFVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLinktextCell(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LinktextCellContext linktextCell() {
		LinktextCellContext _localctx = new LinktextCellContext(_ctx, State);
		EnterRule(_localctx, 242, RULE_linktextCell);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 942; cell();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdCellContext : ParserRuleContext {
		public CellContext cell() {
			return GetRuleContext<CellContext>(0);
		}
		public IdCellContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_idCell; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.EnterIdCell(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.ExitIdCell(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPFVisitor<TResult> typedVisitor = visitor as IPFVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdCell(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdCellContext idCell() {
		IdCellContext _localctx = new IdCellContext(_ctx, State);
		EnterRule(_localctx, 244, RULE_idCell);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 944; cell();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UniquemonsterCellContext : ParserRuleContext {
		public CellContext cell() {
			return GetRuleContext<CellContext>(0);
		}
		public UniquemonsterCellContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_uniquemonsterCell; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.EnterUniquemonsterCell(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.ExitUniquemonsterCell(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPFVisitor<TResult> typedVisitor = visitor as IPFVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUniquemonsterCell(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UniquemonsterCellContext uniquemonsterCell() {
		UniquemonsterCellContext _localctx = new UniquemonsterCellContext(_ctx, State);
		EnterRule(_localctx, 246, RULE_uniquemonsterCell);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 946; cell();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ThassilonianspecializationCellContext : ParserRuleContext {
		public CellContext cell() {
			return GetRuleContext<CellContext>(0);
		}
		public ThassilonianspecializationCellContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_thassilonianspecializationCell; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.EnterThassilonianspecializationCell(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.ExitThassilonianspecializationCell(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPFVisitor<TResult> typedVisitor = visitor as IPFVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThassilonianspecializationCell(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ThassilonianspecializationCellContext thassilonianspecializationCell() {
		ThassilonianspecializationCellContext _localctx = new ThassilonianspecializationCellContext(_ctx, State);
		EnterRule(_localctx, 248, RULE_thassilonianspecializationCell);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 948; cell();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariantCellContext : ParserRuleContext {
		public CellContext cell() {
			return GetRuleContext<CellContext>(0);
		}
		public VariantCellContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variantCell; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.EnterVariantCell(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.ExitVariantCell(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPFVisitor<TResult> typedVisitor = visitor as IPFVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariantCell(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariantCellContext variantCell() {
		VariantCellContext _localctx = new VariantCellContext(_ctx, State);
		EnterRule(_localctx, 250, RULE_variantCell);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 950; cell();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MrCellContext : ParserRuleContext {
		public CellContext cell() {
			return GetRuleContext<CellContext>(0);
		}
		public MrCellContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mrCell; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.EnterMrCell(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.ExitMrCell(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPFVisitor<TResult> typedVisitor = visitor as IPFVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMrCell(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MrCellContext mrCell() {
		MrCellContext _localctx = new MrCellContext(_ctx, State);
		EnterRule(_localctx, 252, RULE_mrCell);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 952; cell();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MythicCellContext : ParserRuleContext {
		public CellContext cell() {
			return GetRuleContext<CellContext>(0);
		}
		public MythicCellContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mythicCell; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.EnterMythicCell(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.ExitMythicCell(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPFVisitor<TResult> typedVisitor = visitor as IPFVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMythicCell(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MythicCellContext mythicCell() {
		MythicCellContext _localctx = new MythicCellContext(_ctx, State);
		EnterRule(_localctx, 254, RULE_mythicCell);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 954; cell();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MtCellContext : ParserRuleContext {
		public CellContext cell() {
			return GetRuleContext<CellContext>(0);
		}
		public MtCellContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mtCell; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.EnterMtCell(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.ExitMtCell(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPFVisitor<TResult> typedVisitor = visitor as IPFVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMtCell(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MtCellContext mtCell() {
		MtCellContext _localctx = new MtCellContext(_ctx, State);
		EnterRule(_localctx, 256, RULE_mtCell);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 956; cell();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SkillContext : ParserRuleContext {
		public SkillNameContext skillName() {
			return GetRuleContext<SkillNameContext>(0);
		}
		public SkillSpecialContext skillSpecial(int i) {
			return GetRuleContext<SkillSpecialContext>(i);
		}
		public ITerminalNode SEP(int i) {
			return GetToken(PFParser.SEP, i);
		}
		public IReadOnlyList<ITerminalNode> SEP() { return GetTokens(PFParser.SEP); }
		public IReadOnlyList<SkillSpecialContext> skillSpecial() {
			return GetRuleContexts<SkillSpecialContext>();
		}
		public PosNegNumberContext posNegNumber() {
			return GetRuleContext<PosNegNumberContext>(0);
		}
		public SkillContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_skill; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.EnterSkill(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.ExitSkill(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPFVisitor<TResult> typedVisitor = visitor as IPFVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSkill(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SkillContext skill() {
		SkillContext _localctx = new SkillContext(_ctx, State);
		EnterRule(_localctx, 258, RULE_skill);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 958; skillName();
			State = 959; posNegNumber();
			State = 972;
			_la = _input.La(1);
			if (_la==T__27) {
				{
				State = 960; Match(T__27);
				State = 961; Match(T__34);
				State = 962; skillSpecial();
				State = 967;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==SEP) {
					{
					{
					State = 963; Match(SEP);
					State = 964; skillSpecial();
					}
					}
					State = 969;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 970; Match(T__15);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SkillNameContext : ParserRuleContext {
		public ITerminalNode STRING(int i) {
			return GetToken(PFParser.STRING, i);
		}
		public IReadOnlyList<ITerminalNode> STRING() { return GetTokens(PFParser.STRING); }
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public SkillNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_skillName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.EnterSkillName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.ExitSkillName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPFVisitor<TResult> typedVisitor = visitor as IPFVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSkillName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SkillNameContext skillName() {
		SkillNameContext _localctx = new SkillNameContext(_ctx, State);
		EnterRule(_localctx, 260, RULE_skillName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 974; name();
			State = 988;
			_la = _input.La(1);
			if (_la==T__34) {
				{
				State = 975; Match(T__34);
				State = 976; Match(STRING);
				State = 984;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==SEP) {
					{
					{
					State = 977; Match(SEP);
					State = 979;
					_la = _input.La(1);
					if (_la==T__27) {
						{
						State = 978; Match(T__27);
						}
					}

					State = 981; Match(STRING);
					}
					}
					State = 986;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 987; Match(T__15);
				}
			}

			State = 991;
			_la = _input.La(1);
			if (_la==T__27) {
				{
				State = 990; Match(T__27);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SkillSpecialContext : ParserRuleContext {
		public ITerminalNode STRING(int i) {
			return GetToken(PFParser.STRING, i);
		}
		public IReadOnlyList<ITerminalNode> STRING() { return GetTokens(PFParser.STRING); }
		public PosNegNumberContext posNegNumber() {
			return GetRuleContext<PosNegNumberContext>(0);
		}
		public SkillSpecialContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_skillSpecial; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.EnterSkillSpecial(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.ExitSkillSpecial(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPFVisitor<TResult> typedVisitor = visitor as IPFVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSkillSpecial(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SkillSpecialContext skillSpecial() {
		SkillSpecialContext _localctx = new SkillSpecialContext(_ctx, State);
		EnterRule(_localctx, 262, RULE_skillSpecial);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 993; posNegNumber();
			State = 995;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 994;
				_la = _input.La(1);
				if ( !(_la==T__14 || _la==STRING) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				}
				}
				State = 997;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==T__14 || _la==STRING );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DistanceContext : ParserRuleContext {
		public ITerminalNode NUMBER() { return GetToken(PFParser.NUMBER, 0); }
		public DistanceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_distance; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.EnterDistance(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.ExitDistance(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPFVisitor<TResult> typedVisitor = visitor as IPFVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDistance(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DistanceContext distance() {
		DistanceContext _localctx = new DistanceContext(_ctx, State);
		EnterRule(_localctx, 264, RULE_distance);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 999; Match(NUMBER);
			State = 1000; Match(T__24);
			State = 1001; Match(T__14);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameContext : ParserRuleContext {
		public NameContext name(int i) {
			return GetRuleContext<NameContext>(i);
		}
		public ITerminalNode STRING() { return GetToken(PFParser.STRING, 0); }
		public IReadOnlyList<NameContext> name() {
			return GetRuleContexts<NameContext>();
		}
		public NameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.EnterName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.ExitName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPFVisitor<TResult> typedVisitor = visitor as IPFVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameContext name() {
		NameContext _localctx = new NameContext(_ctx, State);
		EnterRule(_localctx, 266, RULE_name);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1003; Match(STRING);
			State = 1008;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,52,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1004; Match(T__35);
					State = 1005; name();
					}
					} 
				}
				State = 1010;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,52,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DicesContext : ParserRuleContext {
		public IReadOnlyList<DiceContext> dice() {
			return GetRuleContexts<DiceContext>();
		}
		public DiceContext dice(int i) {
			return GetRuleContext<DiceContext>(i);
		}
		public ModifierContext modifier() {
			return GetRuleContext<ModifierContext>(0);
		}
		public DicesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dices; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.EnterDices(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.ExitDices(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPFVisitor<TResult> typedVisitor = visitor as IPFVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDices(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DicesContext dices() {
		DicesContext _localctx = new DicesContext(_ctx, State);
		EnterRule(_localctx, 268, RULE_dices);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1011; dice();
			State = 1016;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,53,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1012; Match(T__13);
					State = 1013; dice();
					}
					} 
				}
				State = 1018;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,53,_ctx);
			}
			State = 1020;
			_la = _input.La(1);
			if (_la==T__35 || _la==T__13) {
				{
				State = 1019; modifier();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DiceContext : ParserRuleContext {
		public DiceSidesContext diceSides() {
			return GetRuleContext<DiceSidesContext>(0);
		}
		public DiceCountContext diceCount() {
			return GetRuleContext<DiceCountContext>(0);
		}
		public DiceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dice; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.EnterDice(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.ExitDice(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPFVisitor<TResult> typedVisitor = visitor as IPFVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDice(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DiceContext dice() {
		DiceContext _localctx = new DiceContext(_ctx, State);
		EnterRule(_localctx, 270, RULE_dice);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1022; diceCount();
			State = 1023; Match(T__32);
			State = 1024; diceSides();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DiceSidesContext : ParserRuleContext {
		public ITerminalNode NUMBER() { return GetToken(PFParser.NUMBER, 0); }
		public DiceSidesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_diceSides; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.EnterDiceSides(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.ExitDiceSides(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPFVisitor<TResult> typedVisitor = visitor as IPFVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDiceSides(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DiceSidesContext diceSides() {
		DiceSidesContext _localctx = new DiceSidesContext(_ctx, State);
		EnterRule(_localctx, 272, RULE_diceSides);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1026; Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DiceCountContext : ParserRuleContext {
		public ITerminalNode NUMBER() { return GetToken(PFParser.NUMBER, 0); }
		public DiceCountContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_diceCount; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.EnterDiceCount(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.ExitDiceCount(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPFVisitor<TResult> typedVisitor = visitor as IPFVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDiceCount(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DiceCountContext diceCount() {
		DiceCountContext _localctx = new DiceCountContext(_ctx, State);
		EnterRule(_localctx, 274, RULE_diceCount);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1028; Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModifierContext : ParserRuleContext {
		public ITerminalNode NUMBER() { return GetToken(PFParser.NUMBER, 0); }
		public ModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.EnterModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPFListener typedListener = listener as IPFListener;
			if (typedListener != null) typedListener.ExitModifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPFVisitor<TResult> typedVisitor = visitor as IPFVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModifierContext modifier() {
		ModifierContext _localctx = new ModifierContext(_ctx, State);
		EnterRule(_localctx, 276, RULE_modifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1030;
			_la = _input.La(1);
			if ( !(_la==T__35 || _la==T__13) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			State = 1031; Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\x32\x40C\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t\x30\x4\x31\t\x31\x4\x32"+
		"\t\x32\x4\x33\t\x33\x4\x34\t\x34\x4\x35\t\x35\x4\x36\t\x36\x4\x37\t\x37"+
		"\x4\x38\t\x38\x4\x39\t\x39\x4:\t:\x4;\t;\x4<\t<\x4=\t=\x4>\t>\x4?\t?\x4"+
		"@\t@\x4\x41\t\x41\x4\x42\t\x42\x4\x43\t\x43\x4\x44\t\x44\x4\x45\t\x45"+
		"\x4\x46\t\x46\x4G\tG\x4H\tH\x4I\tI\x4J\tJ\x4K\tK\x4L\tL\x4M\tM\x4N\tN"+
		"\x4O\tO\x4P\tP\x4Q\tQ\x4R\tR\x4S\tS\x4T\tT\x4U\tU\x4V\tV\x4W\tW\x4X\t"+
		"X\x4Y\tY\x4Z\tZ\x4[\t[\x4\\\t\\\x4]\t]\x4^\t^\x4_\t_\x4`\t`\x4\x61\t\x61"+
		"\x4\x62\t\x62\x4\x63\t\x63\x4\x64\t\x64\x4\x65\t\x65\x4\x66\t\x66\x4g"+
		"\tg\x4h\th\x4i\ti\x4j\tj\x4k\tk\x4l\tl\x4m\tm\x4n\tn\x4o\to\x4p\tp\x4"+
		"q\tq\x4r\tr\x4s\ts\x4t\tt\x4u\tu\x4v\tv\x4w\tw\x4x\tx\x4y\ty\x4z\tz\x4"+
		"{\t{\x4|\t|\x4}\t}\x4~\t~\x4\x7F\t\x7F\x4\x80\t\x80\x4\x81\t\x81\x4\x82"+
		"\t\x82\x4\x83\t\x83\x4\x84\t\x84\x4\x85\t\x85\x4\x86\t\x86\x4\x87\t\x87"+
		"\x4\x88\t\x88\x4\x89\t\x89\x4\x8A\t\x8A\x4\x8B\t\x8B\x4\x8C\t\x8C\x3\x2"+
		"\x3\x2\x6\x2\x11B\n\x2\r\x2\xE\x2\x11C\x3\x3\x3\x3\x3\x4\x3\x4\x3\x4\a"+
		"\x4\x124\n\x4\f\x4\xE\x4\x127\v\x4\x3\x4\x3\x4\x3\x5\x3\x5\x3\x5\x3\x5"+
		"\x3\x5\x3\x5\x5\x5\x131\n\x5\x3\x6\a\x6\x134\n\x6\f\x6\xE\x6\x137\v\x6"+
		"\x3\a\a\a\x13A\n\a\f\a\xE\a\x13D\v\a\x3\b\x5\b\x140\n\b\x3\b\x3\b\x3\t"+
		"\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t"+
		"\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t"+
		"\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t"+
		"\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t"+
		"\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t"+
		"\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t"+
		"\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t"+
		"\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t"+
		"\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t"+
		"\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t"+
		"\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t"+
		"\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t"+
		"\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t"+
		"\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\n\x3\n"+
		"\x3\v\x3\v\x3\f\x3\f\x3\f\x3\f\x5\f\x20F\n\f\x3\r\x3\r\x3\xE\x3\xE\x3"+
		"\xF\x3\xF\x3\xF\a\xF\x218\n\xF\f\xF\xE\xF\x21B\v\xF\x5\xF\x21D\n\xF\x3"+
		"\x10\x3\x10\a\x10\x221\n\x10\f\x10\xE\x10\x224\v\x10\x3\x10\x3\x10\x3"+
		"\x10\x5\x10\x229\n\x10\x3\x11\x3\x11\x3\x11\x3\x11\x5\x11\x22F\n\x11\x3"+
		"\x12\x3\x12\x3\x13\x3\x13\x3\x14\x3\x14\x3\x15\x3\x15\x3\x16\x3\x16\x3"+
		"\x17\x3\x17\x3\x17\x3\x17\x3\x17\x5\x17\x240\n\x17\x3\x18\x3\x18\x5\x18"+
		"\x244\n\x18\x3\x18\x3\x18\x3\x18\x5\x18\x249\n\x18\x5\x18\x24B\n\x18\x3"+
		"\x18\x5\x18\x24E\n\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18"+
		"\x5\x18\x257\n\x18\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x5\x19\x25E\n\x19"+
		"\x3\x1A\x3\x1A\x3\x1A\a\x1A\x263\n\x1A\f\x1A\xE\x1A\x266\v\x1A\x3\x1A"+
		"\x3\x1A\x5\x1A\x26A\n\x1A\x3\x1A\x3\x1A\x3\x1B\x3\x1B\x5\x1B\x270\n\x1B"+
		"\x3\x1C\x3\x1C\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D"+
		"\x3\x1E\x5\x1E\x27D\n\x1E\x3\x1E\x3\x1E\x3\x1F\x3\x1F\x3\x1F\x3 \x3 \x3"+
		" \x3!\x3!\x3!\x3!\x3!\x3!\x5!\x28D\n!\x3\"\x3\"\x3\"\x3\"\a\"\x293\n\""+
		"\f\"\xE\"\x296\v\"\x3\"\x3\"\x3\"\x3\"\x3\"\a\"\x29D\n\"\f\"\xE\"\x2A0"+
		"\v\"\x3\"\x3\"\x5\"\x2A4\n\"\x3#\x5#\x2A7\n#\x3#\x3#\x3#\x3$\x3$\x6$\x2AE"+
		"\n$\r$\xE$\x2AF\x3%\x3%\x5%\x2B4\n%\x3&\x3&\x3&\x3&\x3&\x5&\x2BB\n&\x3"+
		"\'\x3\'\x3\'\x3\'\x3\'\x5\'\x2C2\n\'\x5\'\x2C4\n\'\x3\'\x3\'\x3\'\x3("+
		"\x3(\x3)\x3)\x3)\x3)\x3*\x3*\x3*\x3*\x3*\x5*\x2D4\n*\x3+\x3+\x3+\x3,\x3"+
		",\x3,\x3-\x3-\x3-\x3.\x3.\x3/\x3/\x3\x30\x3\x30\x3\x31\x3\x31\x3\x32\x3"+
		"\x32\x3\x33\x3\x33\x3\x33\x3\x33\x3\x33\x3\x33\x5\x33\x2EF\n\x33\x3\x34"+
		"\x3\x34\x3\x34\a\x34\x2F4\n\x34\f\x34\xE\x34\x2F7\v\x34\x3\x35\x3\x35"+
		"\x3\x35\x3\x35\x5\x35\x2FD\n\x35\x3\x36\x3\x36\x3\x36\x3\x36\x3\x36\x3"+
		"\x36\x5\x36\x305\n\x36\x3\x37\x3\x37\x3\x37\a\x37\x30A\n\x37\f\x37\xE"+
		"\x37\x30D\v\x37\x3\x38\x3\x38\x3\x39\x3\x39\x3\x39\x3\x39\x3\x39\x3\x39"+
		"\x5\x39\x317\n\x39\x3:\x3:\x3:\a:\x31C\n:\f:\xE:\x31F\v:\x3;\x3;\x3;\x3"+
		"<\x3<\x5<\x326\n<\x3=\x3=\x3>\x3>\x3?\x3?\x3@\x3@\x3\x41\x3\x41\x3\x42"+
		"\x3\x42\x3\x43\x3\x43\x3\x44\x3\x44\x3\x45\x3\x45\x3\x46\x3\x46\x3G\x3"+
		"G\x3H\x3H\x3I\x3I\x3J\x3J\x3K\x3K\x3L\x3L\x3M\x3M\x3N\x3N\x3O\x3O\x3O"+
		"\x3O\x3O\x5O\x351\nO\x3P\x3P\x3P\aP\x356\nP\fP\xEP\x359\vP\x5P\x35B\n"+
		"P\x3Q\x3Q\x3R\x3R\x3S\x3S\x3T\x3T\x3U\x3U\x3V\x3V\x3W\x3W\x3X\x3X\x3Y"+
		"\x3Y\x3Z\x3Z\x3[\x3[\x3\\\x3\\\x3]\x3]\x3^\x3^\x3_\x3_\x3`\x3`\x3\x61"+
		"\x3\x61\x3\x62\x3\x62\x3\x63\x3\x63\x3\x64\x3\x64\x3\x65\x3\x65\x3\x66"+
		"\x3\x66\x3g\x3g\x3h\x3h\x3i\x3i\x3j\x3j\x3k\x3k\x3l\x3l\x3m\x3m\x3n\x3"+
		"n\x3o\x3o\x3p\x3p\x3q\x3q\x3r\x3r\x3s\x3s\x3t\x3t\x3u\x3u\x3v\x3v\x3w"+
		"\x3w\x3x\x3x\x3y\x3y\x3z\x3z\x3{\x3{\x3|\x3|\x3}\x3}\x3~\x3~\x3\x7F\x3"+
		"\x7F\x3\x80\x3\x80\x3\x81\x3\x81\x3\x82\x3\x82\x3\x83\x3\x83\x3\x83\x3"+
		"\x83\x3\x83\x3\x83\x3\x83\a\x83\x3C8\n\x83\f\x83\xE\x83\x3CB\v\x83\x3"+
		"\x83\x3\x83\x5\x83\x3CF\n\x83\x3\x84\x3\x84\x3\x84\x3\x84\x3\x84\x5\x84"+
		"\x3D6\n\x84\x3\x84\a\x84\x3D9\n\x84\f\x84\xE\x84\x3DC\v\x84\x3\x84\x5"+
		"\x84\x3DF\n\x84\x3\x84\x5\x84\x3E2\n\x84\x3\x85\x3\x85\x6\x85\x3E6\n\x85"+
		"\r\x85\xE\x85\x3E7\x3\x86\x3\x86\x3\x86\x3\x86\x3\x87\x3\x87\x3\x87\a"+
		"\x87\x3F1\n\x87\f\x87\xE\x87\x3F4\v\x87\x3\x88\x3\x88\x3\x88\a\x88\x3F9"+
		"\n\x88\f\x88\xE\x88\x3FC\v\x88\x3\x88\x5\x88\x3FF\n\x88\x3\x89\x3\x89"+
		"\x3\x89\x3\x89\x3\x8A\x3\x8A\x3\x8B\x3\x8B\x3\x8C\x3\x8C\x3\x8C\x3\x8C"+
		"\x2\x2\x2\x8D\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14"+
		"\x2\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E\x2 \x2\"\x2$\x2&\x2(\x2*\x2,\x2.\x2"+
		"\x30\x2\x32\x2\x34\x2\x36\x2\x38\x2:\x2<\x2>\x2@\x2\x42\x2\x44\x2\x46"+
		"\x2H\x2J\x2L\x2N\x2P\x2R\x2T\x2V\x2X\x2Z\x2\\\x2^\x2`\x2\x62\x2\x64\x2"+
		"\x66\x2h\x2j\x2l\x2n\x2p\x2r\x2t\x2v\x2x\x2z\x2|\x2~\x2\x80\x2\x82\x2"+
		"\x84\x2\x86\x2\x88\x2\x8A\x2\x8C\x2\x8E\x2\x90\x2\x92\x2\x94\x2\x96\x2"+
		"\x98\x2\x9A\x2\x9C\x2\x9E\x2\xA0\x2\xA2\x2\xA4\x2\xA6\x2\xA8\x2\xAA\x2"+
		"\xAC\x2\xAE\x2\xB0\x2\xB2\x2\xB4\x2\xB6\x2\xB8\x2\xBA\x2\xBC\x2\xBE\x2"+
		"\xC0\x2\xC2\x2\xC4\x2\xC6\x2\xC8\x2\xCA\x2\xCC\x2\xCE\x2\xD0\x2\xD2\x2"+
		"\xD4\x2\xD6\x2\xD8\x2\xDA\x2\xDC\x2\xDE\x2\xE0\x2\xE2\x2\xE4\x2\xE6\x2"+
		"\xE8\x2\xEA\x2\xEC\x2\xEE\x2\xF0\x2\xF2\x2\xF4\x2\xF6\x2\xF8\x2\xFA\x2"+
		"\xFC\x2\xFE\x2\x100\x2\x102\x2\x104\x2\x106\x2\x108\x2\x10A\x2\x10C\x2"+
		"\x10E\x2\x110\x2\x112\x2\x114\x2\x116\x2\x2\f\x3\x2.\x30\x4\x2..\x30\x30"+
		"\x4\x2\a\a\x1D\x1D\v\x2\x5\x5\t\t\v\v\r\r\x11\x11\x13\x13\x18\x18  \'"+
		"\'\b\x2\x3\x3\x10\x10\x1E\x1E\"\"%%(*\x4\x2\x1C\x1C++\x4\x2\x6\x6\f\f"+
		"\x4\x2\xE\xE\x14\x14\x4\x2\x1F\x1F//\x4\x2\x16\x16//\x3BD\x2\x118\x3\x2"+
		"\x2\x2\x4\x11E\x3\x2\x2\x2\x6\x120\x3\x2\x2\x2\b\x130\x3\x2\x2\x2\n\x135"+
		"\x3\x2\x2\x2\f\x13B\x3\x2\x2\x2\xE\x13F\x3\x2\x2\x2\x10\x143\x3\x2\x2"+
		"\x2\x12\x206\x3\x2\x2\x2\x14\x208\x3\x2\x2\x2\x16\x20E\x3\x2\x2\x2\x18"+
		"\x210\x3\x2\x2\x2\x1A\x212\x3\x2\x2\x2\x1C\x21C\x3\x2\x2\x2\x1E\x228\x3"+
		"\x2\x2\x2 \x22A\x3\x2\x2\x2\"\x230\x3\x2\x2\x2$\x232\x3\x2\x2\x2&\x234"+
		"\x3\x2\x2\x2(\x236\x3\x2\x2\x2*\x238\x3\x2\x2\x2,\x23F\x3\x2\x2\x2.\x241"+
		"\x3\x2\x2\x2\x30\x25D\x3\x2\x2\x2\x32\x269\x3\x2\x2\x2\x34\x26D\x3\x2"+
		"\x2\x2\x36\x271\x3\x2\x2\x2\x38\x273\x3\x2\x2\x2:\x27C\x3\x2\x2\x2<\x280"+
		"\x3\x2\x2\x2>\x283\x3\x2\x2\x2@\x28C\x3\x2\x2\x2\x42\x28E\x3\x2\x2\x2"+
		"\x44\x2A6\x3\x2\x2\x2\x46\x2AB\x3\x2\x2\x2H\x2B1\x3\x2\x2\x2J\x2BA\x3"+
		"\x2\x2\x2L\x2BC\x3\x2\x2\x2N\x2C8\x3\x2\x2\x2P\x2CA\x3\x2\x2\x2R\x2CE"+
		"\x3\x2\x2\x2T\x2D5\x3\x2\x2\x2V\x2D8\x3\x2\x2\x2X\x2DB\x3\x2\x2\x2Z\x2DE"+
		"\x3\x2\x2\x2\\\x2E0\x3\x2\x2\x2^\x2E2\x3\x2\x2\x2`\x2E4\x3\x2\x2\x2\x62"+
		"\x2E6\x3\x2\x2\x2\x64\x2EE\x3\x2\x2\x2\x66\x2F0\x3\x2\x2\x2h\x2F8\x3\x2"+
		"\x2\x2j\x304\x3\x2\x2\x2l\x306\x3\x2\x2\x2n\x30E\x3\x2\x2\x2p\x316\x3"+
		"\x2\x2\x2r\x318\x3\x2\x2\x2t\x320\x3\x2\x2\x2v\x325\x3\x2\x2\x2x\x327"+
		"\x3\x2\x2\x2z\x329\x3\x2\x2\x2|\x32B\x3\x2\x2\x2~\x32D\x3\x2\x2\x2\x80"+
		"\x32F\x3\x2\x2\x2\x82\x331\x3\x2\x2\x2\x84\x333\x3\x2\x2\x2\x86\x335\x3"+
		"\x2\x2\x2\x88\x337\x3\x2\x2\x2\x8A\x339\x3\x2\x2\x2\x8C\x33B\x3\x2\x2"+
		"\x2\x8E\x33D\x3\x2\x2\x2\x90\x33F\x3\x2\x2\x2\x92\x341\x3\x2\x2\x2\x94"+
		"\x343\x3\x2\x2\x2\x96\x345\x3\x2\x2\x2\x98\x347\x3\x2\x2\x2\x9A\x349\x3"+
		"\x2\x2\x2\x9C\x350\x3\x2\x2\x2\x9E\x35A\x3\x2\x2\x2\xA0\x35C\x3\x2\x2"+
		"\x2\xA2\x35E\x3\x2\x2\x2\xA4\x360\x3\x2\x2\x2\xA6\x362\x3\x2\x2\x2\xA8"+
		"\x364\x3\x2\x2\x2\xAA\x366\x3\x2\x2\x2\xAC\x368\x3\x2\x2\x2\xAE\x36A\x3"+
		"\x2\x2\x2\xB0\x36C\x3\x2\x2\x2\xB2\x36E\x3\x2\x2\x2\xB4\x370\x3\x2\x2"+
		"\x2\xB6\x372\x3\x2\x2\x2\xB8\x374\x3\x2\x2\x2\xBA\x376\x3\x2\x2\x2\xBC"+
		"\x378\x3\x2\x2\x2\xBE\x37A\x3\x2\x2\x2\xC0\x37C\x3\x2\x2\x2\xC2\x37E\x3"+
		"\x2\x2\x2\xC4\x380\x3\x2\x2\x2\xC6\x382\x3\x2\x2\x2\xC8\x384\x3\x2\x2"+
		"\x2\xCA\x386\x3\x2\x2\x2\xCC\x388\x3\x2\x2\x2\xCE\x38A\x3\x2\x2\x2\xD0"+
		"\x38C\x3\x2\x2\x2\xD2\x38E\x3\x2\x2\x2\xD4\x390\x3\x2\x2\x2\xD6\x392\x3"+
		"\x2\x2\x2\xD8\x394\x3\x2\x2\x2\xDA\x396\x3\x2\x2\x2\xDC\x398\x3\x2\x2"+
		"\x2\xDE\x39A\x3\x2\x2\x2\xE0\x39C\x3\x2\x2\x2\xE2\x39E\x3\x2\x2\x2\xE4"+
		"\x3A0\x3\x2\x2\x2\xE6\x3A2\x3\x2\x2\x2\xE8\x3A4\x3\x2\x2\x2\xEA\x3A6\x3"+
		"\x2\x2\x2\xEC\x3A8\x3\x2\x2\x2\xEE\x3AA\x3\x2\x2\x2\xF0\x3AC\x3\x2\x2"+
		"\x2\xF2\x3AE\x3\x2\x2\x2\xF4\x3B0\x3\x2\x2\x2\xF6\x3B2\x3\x2\x2\x2\xF8"+
		"\x3B4\x3\x2\x2\x2\xFA\x3B6\x3\x2\x2\x2\xFC\x3B8\x3\x2\x2\x2\xFE\x3BA\x3"+
		"\x2\x2\x2\x100\x3BC\x3\x2\x2\x2\x102\x3BE\x3\x2\x2\x2\x104\x3C0\x3\x2"+
		"\x2\x2\x106\x3D0\x3\x2\x2\x2\x108\x3E3\x3\x2\x2\x2\x10A\x3E9\x3\x2\x2"+
		"\x2\x10C\x3ED\x3\x2\x2\x2\x10E\x3F5\x3\x2\x2\x2\x110\x400\x3\x2\x2\x2"+
		"\x112\x404\x3\x2\x2\x2\x114\x406\x3\x2\x2\x2\x116\x408\x3\x2\x2\x2\x118"+
		"\x11A\x5\x4\x3\x2\x119\x11B\x5\x10\t\x2\x11A\x119\x3\x2\x2\x2\x11B\x11C"+
		"\x3\x2\x2\x2\x11C\x11A\x3\x2\x2\x2\x11C\x11D\x3\x2\x2\x2\x11D\x3\x3\x2"+
		"\x2\x2\x11E\x11F\x5\x6\x4\x2\x11F\x5\x3\x2\x2\x2\x120\x125\x5\b\x5\x2"+
		"\x121\x122\a/\x2\x2\x122\x124\x5\b\x5\x2\x123\x121\x3\x2\x2\x2\x124\x127"+
		"\x3\x2\x2\x2\x125\x123\x3\x2\x2\x2\x125\x126\x3\x2\x2\x2\x126\x128\x3"+
		"\x2\x2\x2\x127\x125\x3\x2\x2\x2\x128\x129\a.\x2\x2\x129\a\x3\x2\x2\x2"+
		"\x12A\x12B\a\x30\x2\x2\x12B\x12C\x5\f\a\x2\x12C\x12D\a\x30\x2\x2\x12D"+
		"\x131\x3\x2\x2\x2\x12E\x131\x5\n\x6\x2\x12F\x131\x3\x2\x2\x2\x130\x12A"+
		"\x3\x2\x2\x2\x130\x12E\x3\x2\x2\x2\x130\x12F\x3\x2\x2\x2\x131\t\x3\x2"+
		"\x2\x2\x132\x134\n\x2\x2\x2\x133\x132\x3\x2\x2\x2\x134\x137\x3\x2\x2\x2"+
		"\x135\x133\x3\x2\x2\x2\x135\x136\x3\x2\x2\x2\x136\v\x3\x2\x2\x2\x137\x135"+
		"\x3\x2\x2\x2\x138\x13A\n\x3\x2\x2\x139\x138\x3\x2\x2\x2\x13A\x13D\x3\x2"+
		"\x2\x2\x13B\x139\x3\x2\x2\x2\x13B\x13C\x3\x2\x2\x2\x13C\r\x3\x2\x2\x2"+
		"\x13D\x13B\x3\x2\x2\x2\x13E\x140\t\x4\x2\x2\x13F\x13E\x3\x2\x2\x2\x13F"+
		"\x140\x3\x2\x2\x2\x140\x141\x3\x2\x2\x2\x141\x142\a,\x2\x2\x142\xF\x3"+
		"\x2\x2\x2\x143\x144\x5\x12\n\x2\x144\x145\a/\x2\x2\x145\x146\x5\x14\v"+
		"\x2\x146\x147\a/\x2\x2\x147\x148\x5\x18\r\x2\x148\x149\a/\x2\x2\x149\x14A"+
		"\x5\x1A\xE\x2\x14A\x14B\a/\x2\x2\x14B\x14C\x5\x1C\xF\x2\x14C\x14D\a/\x2"+
		"\x2\x14D\x14E\x5\"\x12\x2\x14E\x14F\a/\x2\x2\x14F\x150\x5$\x13\x2\x150"+
		"\x151\a/\x2\x2\x151\x152\x5&\x14\x2\x152\x153\a/\x2\x2\x153\x154\x5(\x15"+
		"\x2\x154\x155\a/\x2\x2\x155\x156\x5*\x16\x2\x156\x157\a/\x2\x2\x157\x158"+
		"\x5,\x17\x2\x158\x159\a/\x2\x2\x159\x15A\x5\x30\x19\x2\x15A\x15B\a/\x2"+
		"\x2\x15B\x15C\x5\x36\x1C\x2\x15C\x15D\a/\x2\x2\x15D\x15E\x5\x38\x1D\x2"+
		"\x15E\x15F\a/\x2\x2\x15F\x160\x5@!\x2\x160\x161\a/\x2\x2\x161\x162\x5"+
		"H%\x2\x162\x163\a/\x2\x2\x163\x164\x5J&\x2\x164\x165\a/\x2\x2\x165\x166"+
		"\x5N(\x2\x166\x167\a/\x2\x2\x167\x168\x5P)\x2\x168\x169\a/\x2\x2\x169"+
		"\x16A\x5Z.\x2\x16A\x16B\a/\x2\x2\x16B\x16C\x5\\/\x2\x16C\x16D\a/\x2\x2"+
		"\x16D\x16E\x5^\x30\x2\x16E\x16F\a/\x2\x2\x16F\x170\x5`\x31\x2\x170\x171"+
		"\a/\x2\x2\x171\x172\x5\x62\x32\x2\x172\x173\a/\x2\x2\x173\x174\x5\x64"+
		"\x33\x2\x174\x175\a/\x2\x2\x175\x176\x5j\x36\x2\x176\x177\a/\x2\x2\x177"+
		"\x178\x5p\x39\x2\x178\x179\a/\x2\x2\x179\x17A\x5v<\x2\x17A\x17B\a/\x2"+
		"\x2\x17B\x17C\x5x=\x2\x17C\x17D\a/\x2\x2\x17D\x17E\x5z>\x2\x17E\x17F\a"+
		"/\x2\x2\x17F\x180\x5|?\x2\x180\x181\a/\x2\x2\x181\x182\x5~@\x2\x182\x183"+
		"\a/\x2\x2\x183\x184\x5\x80\x41\x2\x184\x185\a/\x2\x2\x185\x186\x5\x82"+
		"\x42\x2\x186\x187\a/\x2\x2\x187\x188\x5\x84\x43\x2\x188\x189\a/\x2\x2"+
		"\x189\x18A\x5\x86\x44\x2\x18A\x18B\a/\x2\x2\x18B\x18C\x5\x88\x45\x2\x18C"+
		"\x18D\a/\x2\x2\x18D\x18E\x5\x8A\x46\x2\x18E\x18F\a/\x2\x2\x18F\x190\x5"+
		"\x8CG\x2\x190\x191\a/\x2\x2\x191\x192\x5\x8EH\x2\x192\x193\a/\x2\x2\x193"+
		"\x194\x5\x90I\x2\x194\x195\a/\x2\x2\x195\x196\x5\x92J\x2\x196\x197\a/"+
		"\x2\x2\x197\x198\x5\x94K\x2\x198\x199\a/\x2\x2\x199\x19A\x5\x96L\x2\x19A"+
		"\x19B\a/\x2\x2\x19B\x19C\x5\x98M\x2\x19C\x19D\a/\x2\x2\x19D\x19E\x5\x9A"+
		"N\x2\x19E\x19F\a/\x2\x2\x19F\x1A0\x5\x9CO\x2\x1A0\x1A1\a/\x2\x2\x1A1\x1A2"+
		"\x5\xA0Q\x2\x1A2\x1A3\a/\x2\x2\x1A3\x1A4\x5\xA2R\x2\x1A4\x1A5\a/\x2\x2"+
		"\x1A5\x1A6\x5\xA4S\x2\x1A6\x1A7\a/\x2\x2\x1A7\x1A8\x5\xA6T\x2\x1A8\x1A9"+
		"\a/\x2\x2\x1A9\x1AA\x5\xA8U\x2\x1AA\x1AB\a/\x2\x2\x1AB\x1AC\x5\xAAV\x2"+
		"\x1AC\x1AD\a/\x2\x2\x1AD\x1AE\x5\xACW\x2\x1AE\x1AF\a/\x2\x2\x1AF\x1B0"+
		"\x5\xAEX\x2\x1B0\x1B1\a/\x2\x2\x1B1\x1B2\x5\xB0Y\x2\x1B2\x1B3\a/\x2\x2"+
		"\x1B3\x1B4\x5\xB2Z\x2\x1B4\x1B5\a/\x2\x2\x1B5\x1B6\x5\xB4[\x2\x1B6\x1B7"+
		"\a/\x2\x2\x1B7\x1B8\x5\xB6\\\x2\x1B8\x1B9\a/\x2\x2\x1B9\x1BA\x5\xB8]\x2"+
		"\x1BA\x1BB\a/\x2\x2\x1BB\x1BC\x5\xBA^\x2\x1BC\x1BD\a/\x2\x2\x1BD\x1BE"+
		"\x5\xBC_\x2\x1BE\x1BF\a/\x2\x2\x1BF\x1C0\x5\xBE`\x2\x1C0\x1C1\a/\x2\x2"+
		"\x1C1\x1C2\x5\xC0\x61\x2\x1C2\x1C3\a/\x2\x2\x1C3\x1C4\x5\xC2\x62\x2\x1C4"+
		"\x1C5\a/\x2\x2\x1C5\x1C6\x5\xC4\x63\x2\x1C6\x1C7\a/\x2\x2\x1C7\x1C8\x5"+
		"\xC6\x64\x2\x1C8\x1C9\a/\x2\x2\x1C9\x1CA\x5\xC8\x65\x2\x1CA\x1CB\a/\x2"+
		"\x2\x1CB\x1CC\x5\xCA\x66\x2\x1CC\x1CD\a/\x2\x2\x1CD\x1CE\x5\xCCg\x2\x1CE"+
		"\x1CF\a/\x2\x2\x1CF\x1D0\x5\xCEh\x2\x1D0\x1D1\a/\x2\x2\x1D1\x1D2\x5\xD0"+
		"i\x2\x1D2\x1D3\a/\x2\x2\x1D3\x1D4\x5\xD2j\x2\x1D4\x1D5\a/\x2\x2\x1D5\x1D6"+
		"\x5\xD4k\x2\x1D6\x1D7\a/\x2\x2\x1D7\x1D8\x5\xD6l\x2\x1D8\x1D9\a/\x2\x2"+
		"\x1D9\x1DA\x5\xD8m\x2\x1DA\x1DB\a/\x2\x2\x1DB\x1DC\x5\xDAn\x2\x1DC\x1DD"+
		"\a/\x2\x2\x1DD\x1DE\x5\xDCo\x2\x1DE\x1DF\a/\x2\x2\x1DF\x1E0\x5\xDEp\x2"+
		"\x1E0\x1E1\a/\x2\x2\x1E1\x1E2\x5\xE0q\x2\x1E2\x1E3\a/\x2\x2\x1E3\x1E4"+
		"\x5\xE2r\x2\x1E4\x1E5\a/\x2\x2\x1E5\x1E6\x5\xE4s\x2\x1E6\x1E7\a/\x2\x2"+
		"\x1E7\x1E8\x5\xE6t\x2\x1E8\x1E9\a/\x2\x2\x1E9\x1EA\x5\xE8u\x2\x1EA\x1EB"+
		"\a/\x2\x2\x1EB\x1EC\x5\xEAv\x2\x1EC\x1ED\a/\x2\x2\x1ED\x1EE\x5\xECw\x2"+
		"\x1EE\x1EF\a/\x2\x2\x1EF\x1F0\x5\xEEx\x2\x1F0\x1F1\a/\x2\x2\x1F1\x1F2"+
		"\x5\xF0y\x2\x1F2\x1F3\a/\x2\x2\x1F3\x1F4\x5\xF2z\x2\x1F4\x1F5\a/\x2\x2"+
		"\x1F5\x1F6\x5\xF4{\x2\x1F6\x1F7\a/\x2\x2\x1F7\x1F8\x5\xF6|\x2\x1F8\x1F9"+
		"\a/\x2\x2\x1F9\x1FA\x5\xF8}\x2\x1FA\x1FB\a/\x2\x2\x1FB\x1FC\x5\xFA~\x2"+
		"\x1FC\x1FD\a/\x2\x2\x1FD\x1FE\x5\xFC\x7F\x2\x1FE\x1FF\a/\x2\x2\x1FF\x200"+
		"\x5\xFE\x80\x2\x200\x201\a/\x2\x2\x201\x202\x5\x100\x81\x2\x202\x203\a"+
		"/\x2\x2\x203\x204\x5\x102\x82\x2\x204\x205\a.\x2\x2\x205\x11\x3\x2\x2"+
		"\x2\x206\x207\x5\b\x5\x2\x207\x13\x3\x2\x2\x2\x208\x209\x5\x16\f\x2\x209"+
		"\x15\x3\x2\x2\x2\x20A\x20F\a,\x2\x2\x20B\x20C\a,\x2\x2\x20C\x20D\a&\x2"+
		"\x2\x20D\x20F\a,\x2\x2\x20E\x20A\x3\x2\x2\x2\x20E\x20B\x3\x2\x2\x2\x20F"+
		"\x17\x3\x2\x2\x2\x210\x211\a,\x2\x2\x211\x19\x3\x2\x2\x2\x212\x213\x5"+
		"\b\x5\x2\x213\x1B\x3\x2\x2\x2\x214\x219\x5\x1E\x10\x2\x215\x216\a&\x2"+
		"\x2\x216\x218\x5\x1E\x10\x2\x217\x215\x3\x2\x2\x2\x218\x21B\x3\x2\x2\x2"+
		"\x219\x217\x3\x2\x2\x2\x219\x21A\x3\x2\x2\x2\x21A\x21D\x3\x2\x2\x2\x21B"+
		"\x219\x3\x2\x2\x2\x21C\x214\x3\x2\x2\x2\x21C\x21D\x3\x2\x2\x2\x21D\x1D"+
		"\x3\x2\x2\x2\x21E\x222\x5 \x11\x2\x21F\x221\a\xF\x2\x2\x220\x21F\x3\x2"+
		"\x2\x2\x221\x224\x3\x2\x2\x2\x222\x220\x3\x2\x2\x2\x222\x223\x3\x2\x2"+
		"\x2\x223\x225\x3\x2\x2\x2\x224\x222\x3\x2\x2\x2\x225\x226\a,\x2\x2\x226"+
		"\x229\x3\x2\x2\x2\x227\x229\a\x1A\x2\x2\x228\x21E\x3\x2\x2\x2\x228\x227"+
		"\x3\x2\x2\x2\x229\x1F\x3\x2\x2\x2\x22A\x22E\a+\x2\x2\x22B\x22C\a\b\x2"+
		"\x2\x22C\x22D\a+\x2\x2\x22D\x22F\a\x1B\x2\x2\x22E\x22B\x3\x2\x2\x2\x22E"+
		"\x22F\x3\x2\x2\x2\x22F!\x3\x2\x2\x2\x230\x231\x5\b\x5\x2\x231#\x3\x2\x2"+
		"\x2\x232\x233\t\x5\x2\x2\x233%\x3\x2\x2\x2\x234\x235\t\x6\x2\x2\x235\'"+
		"\x3\x2\x2\x2\x236\x237\x5\b\x5\x2\x237)\x3\x2\x2\x2\x238\x239\x5\b\x5"+
		"\x2\x239+\x3\x2\x2\x2\x23A\x23B\a\x30\x2\x2\x23B\x23C\x5.\x18\x2\x23C"+
		"\x23D\a\x30\x2\x2\x23D\x240\x3\x2\x2\x2\x23E\x240\x5.\x18\x2\x23F\x23A"+
		"\x3\x2\x2\x2\x23F\x23E\x3\x2\x2\x2\x240-\x3\x2\x2\x2\x241\x243\x5\xE\b"+
		"\x2\x242\x244\a\x17\x2\x2\x243\x242\x3\x2\x2\x2\x243\x244\x3\x2\x2\x2"+
		"\x244\x24A\x3\x2\x2\x2\x245\x246\a&\x2\x2\x246\x248\x5\xE\b\x2\x247\x249"+
		"\a\x17\x2\x2\x248\x247\x3\x2\x2\x2\x248\x249\x3\x2\x2\x2\x249\x24B\x3"+
		"\x2\x2\x2\x24A\x245\x3\x2\x2\x2\x24A\x24B\x3\x2\x2\x2\x24B\x24D\x3\x2"+
		"\x2\x2\x24C\x24E\a\xF\x2\x2\x24D\x24C\x3\x2\x2\x2\x24D\x24E\x3\x2\x2\x2"+
		"\x24E\x256\x3\x2\x2\x2\x24F\x250\a\b\x2\x2\x250\x251\x5\xE\b\x2\x251\x252"+
		"\a+\x2\x2\x252\x253\a\x1B\x2\x2\x253\x257\x3\x2\x2\x2\x254\x255\a/\x2"+
		"\x2\x255\x257\a+\x2\x2\x256\x24F\x3\x2\x2\x2\x256\x254\x3\x2\x2\x2\x256"+
		"\x257\x3\x2\x2\x2\x257/\x3\x2\x2\x2\x258\x259\a\x30\x2\x2\x259\x25A\x5"+
		"\x32\x1A\x2\x25A\x25B\a\x30\x2\x2\x25B\x25E\x3\x2\x2\x2\x25C\x25E\x5\x32"+
		"\x1A\x2\x25D\x258\x3\x2\x2\x2\x25D\x25C\x3\x2\x2\x2\x25E\x31\x3\x2\x2"+
		"\x2\x25F\x264\x5\x34\x1B\x2\x260\x261\a/\x2\x2\x261\x263\x5\x34\x1B\x2"+
		"\x262\x260\x3\x2\x2\x2\x263\x266\x3\x2\x2\x2\x264\x262\x3\x2\x2\x2\x264"+
		"\x265\x3\x2\x2\x2\x265\x267\x3\x2\x2\x2\x266\x264\x3\x2\x2\x2\x267\x268"+
		"\a\x1F\x2\x2\x268\x26A\x3\x2\x2\x2\x269\x25F\x3\x2\x2\x2\x269\x26A\x3"+
		"\x2\x2\x2\x26A\x26B\x3\x2\x2\x2\x26B\x26C\x5\x104\x83\x2\x26C\x33\x3\x2"+
		"\x2\x2\x26D\x26F\x5\x10C\x87\x2\x26E\x270\x5\x10A\x86\x2\x26F\x26E\x3"+
		"\x2\x2\x2\x26F\x270\x3\x2\x2\x2\x270\x35\x3\x2\x2\x2\x271\x272\x5\b\x5"+
		"\x2\x272\x37\x3\x2\x2\x2\x273\x274\a\x30\x2\x2\x274\x275\x5:\x1E\x2\x275"+
		"\x276\a/\x2\x2\x276\x277\x5<\x1F\x2\x277\x278\a/\x2\x2\x278\x279\x5> "+
		"\x2\x279\x27A\a\x30\x2\x2\x27A\x39\x3\x2\x2\x2\x27B\x27D\a\x4\x2\x2\x27C"+
		"\x27B\x3\x2\x2\x2\x27C\x27D\x3\x2\x2\x2\x27D\x27E\x3\x2\x2\x2\x27E\x27F"+
		"\a,\x2\x2\x27F;\x3\x2\x2\x2\x280\x281\a\x19\x2\x2\x281\x282\a,\x2\x2\x282"+
		"=\x3\x2\x2\x2\x283\x284\a#\x2\x2\x284\x285\a,\x2\x2\x285?\x3\x2\x2\x2"+
		"\x286\x28D\x5\x42\"\x2\x287\x288\a\x30\x2\x2\x288\x289\x5\x42\"\x2\x289"+
		"\x28A\a\x30\x2\x2\x28A\x28D\x3\x2\x2\x2\x28B\x28D\x3\x2\x2\x2\x28C\x286"+
		"\x3\x2\x2\x2\x28C\x287\x3\x2\x2\x2\x28C\x28B\x3\x2\x2\x2\x28D\x41\x3\x2"+
		"\x2\x2\x28E\x28F\a\b\x2\x2\x28F\x294\x5\x44#\x2\x290\x291\a/\x2\x2\x291"+
		"\x293\x5\x44#\x2\x292\x290\x3\x2\x2\x2\x293\x296\x3\x2\x2\x2\x294\x292"+
		"\x3\x2\x2\x2\x294\x295\x3\x2\x2\x2\x295\x297\x3\x2\x2\x2\x296\x294\x3"+
		"\x2\x2\x2\x297\x2A3\a\x1B\x2\x2\x298\x299\a\b\x2\x2\x299\x29E\x5\x46$"+
		"\x2\x29A\x29B\a/\x2\x2\x29B\x29D\x5\x46$\x2\x29C\x29A\x3\x2\x2\x2\x29D"+
		"\x2A0\x3\x2\x2\x2\x29E\x29C\x3\x2\x2\x2\x29E\x29F\x3\x2\x2\x2\x29F\x2A1"+
		"\x3\x2\x2\x2\x2A0\x29E\x3\x2\x2\x2\x2A1\x2A2\a\x1B\x2\x2\x2A2\x2A4\x3"+
		"\x2\x2\x2\x2A3\x298\x3\x2\x2\x2\x2A3\x2A4\x3\x2\x2\x2\x2A4\x43\x3\x2\x2"+
		"\x2\x2A5\x2A7\a\xF\x2\x2\x2A6\x2A5\x3\x2\x2\x2\x2A6\x2A7\x3\x2\x2\x2\x2A7"+
		"\x2A8\x3\x2\x2\x2\x2A8\x2A9\x5\x116\x8C\x2\x2A9\x2AA\x5\x10C\x87\x2\x2AA"+
		"\x45\x3\x2\x2\x2\x2AB\x2AD\x5\xE\b\x2\x2AC\x2AE\t\a\x2\x2\x2AD\x2AC\x3"+
		"\x2\x2\x2\x2AE\x2AF\x3\x2\x2\x2\x2AF\x2AD\x3\x2\x2\x2\x2AF\x2B0\x3\x2"+
		"\x2\x2\x2B0G\x3\x2\x2\x2\x2B1\x2B3\a,\x2\x2\x2B2\x2B4\t\b\x2\x2\x2B3\x2B2"+
		"\x3\x2\x2\x2\x2B3\x2B4\x3\x2\x2\x2\x2B4I\x3\x2\x2\x2\x2B5\x2BB\x5L\'\x2"+
		"\x2B6\x2B7\a\x30\x2\x2\x2B7\x2B8\x5L\'\x2\x2B8\x2B9\a\x30\x2\x2\x2B9\x2BB"+
		"\x3\x2\x2\x2\x2BA\x2B5\x3\x2\x2\x2\x2BA\x2B6\x3\x2\x2\x2\x2BBK\x3\x2\x2"+
		"\x2\x2BC\x2C3\a\b\x2\x2\x2BD\x2BE\a,\x2\x2\x2BE\x2BF\t\t\x2\x2\x2BF\x2C1"+
		"\t\n\x2\x2\x2C0\x2C2\a\xF\x2\x2\x2C1\x2C0\x3\x2\x2\x2\x2C1\x2C2\x3\x2"+
		"\x2\x2\x2C2\x2C4\x3\x2\x2\x2\x2C3\x2BD\x3\x2\x2\x2\x2C3\x2C4\x3\x2\x2"+
		"\x2\x2C4\x2C5\x3\x2\x2\x2\x2C5\x2C6\x5\x10E\x88\x2\x2C6\x2C7\a\x1B\x2"+
		"\x2\x2C7M\x3\x2\x2\x2\x2C8\x2C9\x5\b\x5\x2\x2C9O\x3\x2\x2\x2\x2CA\x2CB"+
		"\a\x30\x2\x2\x2CB\x2CC\x5R*\x2\x2CC\x2CD\a\x30\x2\x2\x2CDQ\x3\x2\x2\x2"+
		"\x2CE\x2CF\x5T+\x2\x2CF\x2D0\x5V,\x2\x2D0\x2D3\x5X-\x2\x2D1\x2D2\a\x1F"+
		"\x2\x2\x2D2\x2D4\x5\f\a\x2\x2D3\x2D1\x3\x2\x2\x2\x2D3\x2D4\x3\x2\x2\x2"+
		"\x2D4S\x3\x2\x2\x2\x2D5\x2D6\a!\x2\x2\x2D6\x2D7\x5\x116\x8C\x2\x2D7U\x3"+
		"\x2\x2\x2\x2D8\x2D9\a\x15\x2\x2\x2D9\x2DA\x5\x116\x8C\x2\x2DAW\x3\x2\x2"+
		"\x2\x2DB\x2DC\a$\x2\x2\x2DC\x2DD\x5\x116\x8C\x2\x2DDY\x3\x2\x2\x2\x2DE"+
		"\x2DF\x5\b\x5\x2\x2DF[\x3\x2\x2\x2\x2E0\x2E1\x5\b\x5\x2\x2E1]\x3\x2\x2"+
		"\x2\x2E2\x2E3\x5\b\x5\x2\x2E3_\x3\x2\x2\x2\x2E4\x2E5\x5\b\x5\x2\x2E5\x61"+
		"\x3\x2\x2\x2\x2E6\x2E7\x5\b\x5\x2\x2E7\x63\x3\x2\x2\x2\x2E8\x2E9\a\x30"+
		"\x2\x2\x2E9\x2EA\x5\x66\x34\x2\x2EA\x2EB\a\x30\x2\x2\x2EB\x2EF\x3\x2\x2"+
		"\x2\x2EC\x2EF\x5h\x35\x2\x2ED\x2EF\x3\x2\x2\x2\x2EE\x2E8\x3\x2\x2\x2\x2EE"+
		"\x2EC\x3\x2\x2\x2\x2EE\x2ED\x3\x2\x2\x2\x2EF\x65\x3\x2\x2\x2\x2F0\x2F5"+
		"\x5h\x35\x2\x2F1\x2F2\t\v\x2\x2\x2F2\x2F4\x5h\x35\x2\x2F3\x2F1\x3\x2\x2"+
		"\x2\x2F4\x2F7\x3\x2\x2\x2\x2F5\x2F3\x3\x2\x2\x2\x2F5\x2F6\x3\x2\x2\x2"+
		"\x2F6g\x3\x2\x2\x2\x2F7\x2F5\x3\x2\x2\x2\x2F8\x2F9\a,\x2\x2\x2F9\x2FC"+
		"\a&\x2\x2\x2FA\x2FD\x5\n\x6\x2\x2FB\x2FD\a\a\x2\x2\x2FC\x2FA\x3\x2\x2"+
		"\x2\x2FC\x2FB\x3\x2\x2\x2\x2FDi\x3\x2\x2\x2\x2FE\x2FF\a\x30\x2\x2\x2FF"+
		"\x300\x5l\x37\x2\x300\x301\a\x30\x2\x2\x301\x305\x3\x2\x2\x2\x302\x305"+
		"\x5n\x38\x2\x303\x305\x3\x2\x2\x2\x304\x2FE\x3\x2\x2\x2\x304\x302\x3\x2"+
		"\x2\x2\x304\x303\x3\x2\x2\x2\x305k\x3\x2\x2\x2\x306\x30B\x5n\x38\x2\x307"+
		"\x308\t\v\x2\x2\x308\x30A\x5n\x38\x2\x309\x307\x3\x2\x2\x2\x30A\x30D\x3"+
		"\x2\x2\x2\x30B\x309\x3\x2\x2\x2\x30B\x30C\x3\x2\x2\x2\x30Cm\x3\x2\x2\x2"+
		"\x30D\x30B\x3\x2\x2\x2\x30E\x30F\x5\n\x6\x2\x30Fo\x3\x2\x2\x2\x310\x311"+
		"\a\x30\x2\x2\x311\x312\x5r:\x2\x312\x313\a\x30\x2\x2\x313\x317\x3\x2\x2"+
		"\x2\x314\x317\x5t;\x2\x315\x317\x3\x2\x2\x2\x316\x310\x3\x2\x2\x2\x316"+
		"\x314\x3\x2\x2\x2\x316\x315\x3\x2\x2\x2\x317q\x3\x2\x2\x2\x318\x31D\x5"+
		"t;\x2\x319\x31A\t\v\x2\x2\x31A\x31C\x5t;\x2\x31B\x319\x3\x2\x2\x2\x31C"+
		"\x31F\x3\x2\x2\x2\x31D\x31B\x3\x2\x2\x2\x31D\x31E\x3\x2\x2\x2\x31Es\x3"+
		"\x2\x2\x2\x31F\x31D\x3\x2\x2\x2\x320\x321\a+\x2\x2\x321\x322\a,\x2\x2"+
		"\x322u\x3\x2\x2\x2\x323\x326\a,\x2\x2\x324\x326\x3\x2\x2\x2\x325\x323"+
		"\x3\x2\x2\x2\x325\x324\x3\x2\x2\x2\x326w\x3\x2\x2\x2\x327\x328\x5\b\x5"+
		"\x2\x328y\x3\x2\x2\x2\x329\x32A\x5\b\x5\x2\x32A{\x3\x2\x2\x2\x32B\x32C"+
		"\x5\b\x5\x2\x32C}\x3\x2\x2\x2\x32D\x32E\x5\b\x5\x2\x32E\x7F\x3\x2\x2\x2"+
		"\x32F\x330\x5\b\x5\x2\x330\x81\x3\x2\x2\x2\x331\x332\x5\b\x5\x2\x332\x83"+
		"\x3\x2\x2\x2\x333\x334\x5\b\x5\x2\x334\x85\x3\x2\x2\x2\x335\x336\x5\b"+
		"\x5\x2\x336\x87\x3\x2\x2\x2\x337\x338\x5\b\x5\x2\x338\x89\x3\x2\x2\x2"+
		"\x339\x33A\x5\b\x5\x2\x33A\x8B\x3\x2\x2\x2\x33B\x33C\x5\b\x5\x2\x33C\x8D"+
		"\x3\x2\x2\x2\x33D\x33E\x5\b\x5\x2\x33E\x8F\x3\x2\x2\x2\x33F\x340\x5\b"+
		"\x5\x2\x340\x91\x3\x2\x2\x2\x341\x342\x5\b\x5\x2\x342\x93\x3\x2\x2\x2"+
		"\x343\x344\x5\b\x5\x2\x344\x95\x3\x2\x2\x2\x345\x346\x5\b\x5\x2\x346\x97"+
		"\x3\x2\x2\x2\x347\x348\x5\b\x5\x2\x348\x99\x3\x2\x2\x2\x349\x34A\x5\b"+
		"\x5\x2\x34A\x9B\x3\x2\x2\x2\x34B\x351\x5\x9EP\x2\x34C\x34D\a\x30\x2\x2"+
		"\x34D\x34E\x5\x9EP\x2\x34E\x34F\a\x30\x2\x2\x34F\x351\x3\x2\x2\x2\x350"+
		"\x34B\x3\x2\x2\x2\x350\x34C\x3\x2\x2\x2\x351\x9D\x3\x2\x2\x2\x352\x357"+
		"\x5\x104\x83\x2\x353\x354\a/\x2\x2\x354\x356\x5\x104\x83\x2\x355\x353"+
		"\x3\x2\x2\x2\x356\x359\x3\x2\x2\x2\x357\x355\x3\x2\x2\x2\x357\x358\x3"+
		"\x2\x2\x2\x358\x35B\x3\x2\x2\x2\x359\x357\x3\x2\x2\x2\x35A\x352\x3\x2"+
		"\x2\x2\x35A\x35B\x3\x2\x2\x2\x35B\x9F\x3\x2\x2\x2\x35C\x35D\x5\b\x5\x2"+
		"\x35D\xA1\x3\x2\x2\x2\x35E\x35F\x5\b\x5\x2\x35F\xA3\x3\x2\x2\x2\x360\x361"+
		"\x5\b\x5\x2\x361\xA5\x3\x2\x2\x2\x362\x363\x5\b\x5\x2\x363\xA7\x3\x2\x2"+
		"\x2\x364\x365\x5\b\x5\x2\x365\xA9\x3\x2\x2\x2\x366\x367\x5\b\x5\x2\x367"+
		"\xAB\x3\x2\x2\x2\x368\x369\x5\b\x5\x2\x369\xAD\x3\x2\x2\x2\x36A\x36B\x5"+
		"\b\x5\x2\x36B\xAF\x3\x2\x2\x2\x36C\x36D\x5\b\x5\x2\x36D\xB1\x3\x2\x2\x2"+
		"\x36E\x36F\x5\b\x5\x2\x36F\xB3\x3\x2\x2\x2\x370\x371\x5\b\x5\x2\x371\xB5"+
		"\x3\x2\x2\x2\x372\x373\x5\b\x5\x2\x373\xB7\x3\x2\x2\x2\x374\x375\x5\b"+
		"\x5\x2\x375\xB9\x3\x2\x2\x2\x376\x377\x5\b\x5\x2\x377\xBB\x3\x2\x2\x2"+
		"\x378\x379\x5\b\x5\x2\x379\xBD\x3\x2\x2\x2\x37A\x37B\x5\b\x5\x2\x37B\xBF"+
		"\x3\x2\x2\x2\x37C\x37D\x5\b\x5\x2\x37D\xC1\x3\x2\x2\x2\x37E\x37F\x5\b"+
		"\x5\x2\x37F\xC3\x3\x2\x2\x2\x380\x381\x5\b\x5\x2\x381\xC5\x3\x2\x2\x2"+
		"\x382\x383\x5\b\x5\x2\x383\xC7\x3\x2\x2\x2\x384\x385\x5\b\x5\x2\x385\xC9"+
		"\x3\x2\x2\x2\x386\x387\x5\b\x5\x2\x387\xCB\x3\x2\x2\x2\x388\x389\x5\b"+
		"\x5\x2\x389\xCD\x3\x2\x2\x2\x38A\x38B\x5\b\x5\x2\x38B\xCF\x3\x2\x2\x2"+
		"\x38C\x38D\x5\b\x5\x2\x38D\xD1\x3\x2\x2\x2\x38E\x38F\x5\b\x5\x2\x38F\xD3"+
		"\x3\x2\x2\x2\x390\x391\x5\b\x5\x2\x391\xD5\x3\x2\x2\x2\x392\x393\x5\b"+
		"\x5\x2\x393\xD7\x3\x2\x2\x2\x394\x395\x5\b\x5\x2\x395\xD9\x3\x2\x2\x2"+
		"\x396\x397\x5\b\x5\x2\x397\xDB\x3\x2\x2\x2\x398\x399\x5\b\x5\x2\x399\xDD"+
		"\x3\x2\x2\x2\x39A\x39B\x5\b\x5\x2\x39B\xDF\x3\x2\x2\x2\x39C\x39D\x5\b"+
		"\x5\x2\x39D\xE1\x3\x2\x2\x2\x39E\x39F\x5\b\x5\x2\x39F\xE3\x3\x2\x2\x2"+
		"\x3A0\x3A1\x5\b\x5\x2\x3A1\xE5\x3\x2\x2\x2\x3A2\x3A3\x5\b\x5\x2\x3A3\xE7"+
		"\x3\x2\x2\x2\x3A4\x3A5\x5\b\x5\x2\x3A5\xE9\x3\x2\x2\x2\x3A6\x3A7\x5\b"+
		"\x5\x2\x3A7\xEB\x3\x2\x2\x2\x3A8\x3A9\x5\b\x5\x2\x3A9\xED\x3\x2\x2\x2"+
		"\x3AA\x3AB\x5\b\x5\x2\x3AB\xEF\x3\x2\x2\x2\x3AC\x3AD\x5\b\x5\x2\x3AD\xF1"+
		"\x3\x2\x2\x2\x3AE\x3AF\x5\b\x5\x2\x3AF\xF3\x3\x2\x2\x2\x3B0\x3B1\x5\b"+
		"\x5\x2\x3B1\xF5\x3\x2\x2\x2\x3B2\x3B3\x5\b\x5\x2\x3B3\xF7\x3\x2\x2\x2"+
		"\x3B4\x3B5\x5\b\x5\x2\x3B5\xF9\x3\x2\x2\x2\x3B6\x3B7\x5\b\x5\x2\x3B7\xFB"+
		"\x3\x2\x2\x2\x3B8\x3B9\x5\b\x5\x2\x3B9\xFD\x3\x2\x2\x2\x3BA\x3BB\x5\b"+
		"\x5\x2\x3BB\xFF\x3\x2\x2\x2\x3BC\x3BD\x5\b\x5\x2\x3BD\x101\x3\x2\x2\x2"+
		"\x3BE\x3BF\x5\b\x5\x2\x3BF\x103\x3\x2\x2\x2\x3C0\x3C1\x5\x106\x84\x2\x3C1"+
		"\x3CE\x5\xE\b\x2\x3C2\x3C3\a\xF\x2\x2\x3C3\x3C4\a\b\x2\x2\x3C4\x3C9\x5"+
		"\x108\x85\x2\x3C5\x3C6\a/\x2\x2\x3C6\x3C8\x5\x108\x85\x2\x3C7\x3C5\x3"+
		"\x2\x2\x2\x3C8\x3CB\x3\x2\x2\x2\x3C9\x3C7\x3\x2\x2\x2\x3C9\x3CA\x3\x2"+
		"\x2\x2\x3CA\x3CC\x3\x2\x2\x2\x3CB\x3C9\x3\x2\x2\x2\x3CC\x3CD\a\x1B\x2"+
		"\x2\x3CD\x3CF\x3\x2\x2\x2\x3CE\x3C2\x3\x2\x2\x2\x3CE\x3CF\x3\x2\x2\x2"+
		"\x3CF\x105\x3\x2\x2\x2\x3D0\x3DE\x5\x10C\x87\x2\x3D1\x3D2\a\b\x2\x2\x3D2"+
		"\x3DA\a+\x2\x2\x3D3\x3D5\a/\x2\x2\x3D4\x3D6\a\xF\x2\x2\x3D5\x3D4\x3\x2"+
		"\x2\x2\x3D5\x3D6\x3\x2\x2\x2\x3D6\x3D7\x3\x2\x2\x2\x3D7\x3D9\a+\x2\x2"+
		"\x3D8\x3D3\x3\x2\x2\x2\x3D9\x3DC\x3\x2\x2\x2\x3DA\x3D8\x3\x2\x2\x2\x3DA"+
		"\x3DB\x3\x2\x2\x2\x3DB\x3DD\x3\x2\x2\x2\x3DC\x3DA\x3\x2\x2\x2\x3DD\x3DF"+
		"\a\x1B\x2\x2\x3DE\x3D1\x3\x2\x2\x2\x3DE\x3DF\x3\x2\x2\x2\x3DF\x3E1\x3"+
		"\x2\x2\x2\x3E0\x3E2\a\xF\x2\x2\x3E1\x3E0\x3\x2\x2\x2\x3E1\x3E2\x3\x2\x2"+
		"\x2\x3E2\x107\x3\x2\x2\x2\x3E3\x3E5\x5\xE\b\x2\x3E4\x3E6\t\a\x2\x2\x3E5"+
		"\x3E4\x3\x2\x2\x2\x3E6\x3E7\x3\x2\x2\x2\x3E7\x3E5\x3\x2\x2\x2\x3E7\x3E8"+
		"\x3\x2\x2\x2\x3E8\x109\x3\x2\x2\x2\x3E9\x3EA\a,\x2\x2\x3EA\x3EB\a\x12"+
		"\x2\x2\x3EB\x3EC\a\x1C\x2\x2\x3EC\x10B\x3\x2\x2\x2\x3ED\x3F2\a+\x2\x2"+
		"\x3EE\x3EF\a\a\x2\x2\x3EF\x3F1\x5\x10C\x87\x2\x3F0\x3EE\x3\x2\x2\x2\x3F1"+
		"\x3F4\x3\x2\x2\x2\x3F2\x3F0\x3\x2\x2\x2\x3F2\x3F3\x3\x2\x2\x2\x3F3\x10D"+
		"\x3\x2\x2\x2\x3F4\x3F2\x3\x2\x2\x2\x3F5\x3FA\x5\x110\x89\x2\x3F6\x3F7"+
		"\a\x1D\x2\x2\x3F7\x3F9\x5\x110\x89\x2\x3F8\x3F6\x3\x2\x2\x2\x3F9\x3FC"+
		"\x3\x2\x2\x2\x3FA\x3F8\x3\x2\x2\x2\x3FA\x3FB\x3\x2\x2\x2\x3FB\x3FE\x3"+
		"\x2\x2\x2\x3FC\x3FA\x3\x2\x2\x2\x3FD\x3FF\x5\x116\x8C\x2\x3FE\x3FD\x3"+
		"\x2\x2\x2\x3FE\x3FF\x3\x2\x2\x2\x3FF\x10F\x3\x2\x2\x2\x400\x401\x5\x114"+
		"\x8B\x2\x401\x402\a\n\x2\x2\x402\x403\x5\x112\x8A\x2\x403\x111\x3\x2\x2"+
		"\x2\x404\x405\a,\x2\x2\x405\x113\x3\x2\x2\x2\x406\x407\a,\x2\x2\x407\x115"+
		"\x3\x2\x2\x2\x408\x409\t\x4\x2\x2\x409\x40A\a,\x2\x2\x40A\x117\x3\x2\x2"+
		"\x2\x39\x11C\x125\x130\x135\x13B\x13F\x20E\x219\x21C\x222\x228\x22E\x23F"+
		"\x243\x248\x24A\x24D\x256\x25D\x264\x269\x26F\x27C\x28C\x294\x29E\x2A3"+
		"\x2A6\x2AF\x2B3\x2BA\x2C1\x2C3\x2D3\x2EE\x2F5\x2FC\x304\x30B\x316\x31D"+
		"\x325\x350\x357\x35A\x3C9\x3CE\x3D5\x3DA\x3DE\x3E1\x3E7\x3F2\x3FA\x3FE";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
