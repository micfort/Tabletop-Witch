//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /home/michiel/TabletopWitch/src/PreProcess/micfort.GMDroid.PF/CSV/CSV.g4 by ANTLR 4.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.3")]
[System.CLSCompliant(false)]
public partial class CSVParser : Parser {
	public const int
		T__2=1, T__1=2, T__0=3, TEXT=4, STRING=5;
	public static readonly string[] tokenNames = {
		"<INVALID>", "','", "'\n'", "'\r'", "TEXT", "STRING"
	};
	public const int
		RULE_file = 0, RULE_hdr = 1, RULE_row = 2, RULE_field = 3;
	public static readonly string[] ruleNames = {
		"file", "hdr", "row", "field"
	};

	public override string GrammarFileName { get { return "CSV.g4"; } }

	public override string[] TokenNames { get { return tokenNames; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public CSVParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class FileContext : ParserRuleContext {
		public HdrContext hdr() {
			return GetRuleContext<HdrContext>(0);
		}
		public RowContext row(int i) {
			return GetRuleContext<RowContext>(i);
		}
		public IReadOnlyList<RowContext> row() {
			return GetRuleContexts<RowContext>();
		}
		public FileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSVListener typedListener = listener as ICSVListener;
			if (typedListener != null) typedListener.EnterFile(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSVListener typedListener = listener as ICSVListener;
			if (typedListener != null) typedListener.ExitFile(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSVVisitor<TResult> typedVisitor = visitor as ICSVVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileContext file() {
		FileContext _localctx = new FileContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_file);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8; hdr();
			State = 10;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 9; row();
				}
				}
				State = 12;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << T__1) | (1L << T__0) | (1L << TEXT) | (1L << STRING))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HdrContext : ParserRuleContext {
		public FieldContext field(int i) {
			return GetRuleContext<FieldContext>(i);
		}
		public IReadOnlyList<FieldContext> field() {
			return GetRuleContexts<FieldContext>();
		}
		public HdrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hdr; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSVListener typedListener = listener as ICSVListener;
			if (typedListener != null) typedListener.EnterHdr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSVListener typedListener = listener as ICSVListener;
			if (typedListener != null) typedListener.ExitHdr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSVVisitor<TResult> typedVisitor = visitor as ICSVVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHdr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HdrContext hdr() {
		HdrContext _localctx = new HdrContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_hdr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 14; field();
			State = 19;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__2) {
				{
				{
				State = 15; Match(T__2);
				State = 16; field();
				}
				}
				State = 21;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 23;
			_la = _input.La(1);
			if (_la==T__0) {
				{
				State = 22; Match(T__0);
				}
			}

			State = 25; Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RowContext : ParserRuleContext {
		public FieldContext field(int i) {
			return GetRuleContext<FieldContext>(i);
		}
		public IReadOnlyList<FieldContext> field() {
			return GetRuleContexts<FieldContext>();
		}
		public RowContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_row; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSVListener typedListener = listener as ICSVListener;
			if (typedListener != null) typedListener.EnterRow(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSVListener typedListener = listener as ICSVListener;
			if (typedListener != null) typedListener.ExitRow(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSVVisitor<TResult> typedVisitor = visitor as ICSVVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRow(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RowContext row() {
		RowContext _localctx = new RowContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_row);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 27; field();
			State = 32;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__2) {
				{
				{
				State = 28; Match(T__2);
				State = 29; field();
				}
				}
				State = 34;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 36;
			_la = _input.La(1);
			if (_la==T__0) {
				{
				State = 35; Match(T__0);
				}
			}

			State = 38; Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldContext : ParserRuleContext {
		public ITerminalNode TEXT() { return GetToken(CSVParser.TEXT, 0); }
		public ITerminalNode STRING() { return GetToken(CSVParser.STRING, 0); }
		public FieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_field; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSVListener typedListener = listener as ICSVListener;
			if (typedListener != null) typedListener.EnterField(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSVListener typedListener = listener as ICSVListener;
			if (typedListener != null) typedListener.ExitField(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSVVisitor<TResult> typedVisitor = visitor as ICSVVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitField(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldContext field() {
		FieldContext _localctx = new FieldContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_field);
		try {
			State = 43;
			switch (_input.La(1)) {
			case TEXT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 40; Match(TEXT);
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 41; Match(STRING);
				}
				break;
			case T__2:
			case T__1:
			case T__0:
				EnterOuterAlt(_localctx, 3);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\a\x30\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x3\x2\x3\x2\x6\x2\r\n\x2\r\x2\xE\x2"+
		"\xE\x3\x3\x3\x3\x3\x3\a\x3\x14\n\x3\f\x3\xE\x3\x17\v\x3\x3\x3\x5\x3\x1A"+
		"\n\x3\x3\x3\x3\x3\x3\x4\x3\x4\x3\x4\a\x4!\n\x4\f\x4\xE\x4$\v\x4\x3\x4"+
		"\x5\x4\'\n\x4\x3\x4\x3\x4\x3\x5\x3\x5\x3\x5\x5\x5.\n\x5\x3\x5\x2\x2\x2"+
		"\x6\x2\x2\x4\x2\x6\x2\b\x2\x2\x2\x32\x2\n\x3\x2\x2\x2\x4\x10\x3\x2\x2"+
		"\x2\x6\x1D\x3\x2\x2\x2\b-\x3\x2\x2\x2\n\f\x5\x4\x3\x2\v\r\x5\x6\x4\x2"+
		"\f\v\x3\x2\x2\x2\r\xE\x3\x2\x2\x2\xE\f\x3\x2\x2\x2\xE\xF\x3\x2\x2\x2\xF"+
		"\x3\x3\x2\x2\x2\x10\x15\x5\b\x5\x2\x11\x12\a\x3\x2\x2\x12\x14\x5\b\x5"+
		"\x2\x13\x11\x3\x2\x2\x2\x14\x17\x3\x2\x2\x2\x15\x13\x3\x2\x2\x2\x15\x16"+
		"\x3\x2\x2\x2\x16\x19\x3\x2\x2\x2\x17\x15\x3\x2\x2\x2\x18\x1A\a\x5\x2\x2"+
		"\x19\x18\x3\x2\x2\x2\x19\x1A\x3\x2\x2\x2\x1A\x1B\x3\x2\x2\x2\x1B\x1C\a"+
		"\x4\x2\x2\x1C\x5\x3\x2\x2\x2\x1D\"\x5\b\x5\x2\x1E\x1F\a\x3\x2\x2\x1F!"+
		"\x5\b\x5\x2 \x1E\x3\x2\x2\x2!$\x3\x2\x2\x2\" \x3\x2\x2\x2\"#\x3\x2\x2"+
		"\x2#&\x3\x2\x2\x2$\"\x3\x2\x2\x2%\'\a\x5\x2\x2&%\x3\x2\x2\x2&\'\x3\x2"+
		"\x2\x2\'(\x3\x2\x2\x2()\a\x4\x2\x2)\a\x3\x2\x2\x2*.\a\x6\x2\x2+.\a\a\x2"+
		"\x2,.\x3\x2\x2\x2-*\x3\x2\x2\x2-+\x3\x2\x2\x2-,\x3\x2\x2\x2.\t\x3\x2\x2"+
		"\x2\b\xE\x15\x19\"&-";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
